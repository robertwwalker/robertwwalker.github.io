{
  "hash": "c757db555ea6bfae59ca3ae7f2ccd666",
  "result": {
    "markdown": "---\ntitle: Pigeons and Palettes\ndate: 2023-01-03\nbibliography: \"bibliography.bib\"\nnocite: |\n     @*\ntitle-block-banner: false \nimage: \"image.png\"\ncomments:\n   giscus: \n     repo: robertwwalker/robertwwalker.github.io\n---\n\n\n<marquee scrollamount=\"10\"><h1><p style=\"color:purple;\">{{< fa brands r-project >}}obertwwalker.github.io <br></p></h1></marquee>\n\n\n# An Amazing Pigeon Becomes a Palette\n\nIt really is an amazing pigeon.  Apologies that I haven't a photo credit for it; I found it one day on twitter as it went viral.  It is a New York City pigeon.\n\n![Pigeon](img/Pigeon.png)\n\nI want to color something with colors from that pigeon.  First, I have to get the color palette.\n\n## `imgpalr`\n\n{{< fa brands r-project >}} has a package called `imgpalr` that will extract colors from an image.  If I need to, it is `install.packages(\"imgpalr\")`.\n\nIn the following code chunk, I will load the package and then I want to point it to the pigeon image that I downloaded.  In my case, it is in the same directory as the R Markdown file and is called `Pigeon.png`.\n\nInside the command `image_pal()`, I point it to an image, I specify how many colors [5], what type of color scheme, I want qualitative, and then some characteristics of the colors.  The plot will show me the image alongside the palette though it is upside down.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(imgpalr)\nPigeon.colors <- image_pal(\"img/Pigeon.png\", # This will need to be adjusted to the actual file location on your computer.  Mine is in my downloads.\n          n = 5, # How many colors?\n          type = \"qual\", # Type of palette?\n          saturation = c(0.75, 1), \n          brightness = c(0.75, 1), \n          plot = TRUE, # Show the image and the palette?\n          bw = c(0.7, 0.95)\n          )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nPigeon.colors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#AF98E6\" \"#DA99E6\" \"#E5DD97\" \"#DD92C5\" \"#9CA6E3\"\n```\n:::\n:::\n\n\nNow I have a palette in the markdown environment called Pigeon.colors.  \n\n## Data to plot\n\nNow I need some data; I want five categories to match my palette.  The rest is junk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nJunk.data <- data.frame(Stuff=c(\"Hi\",\"Howdy\",\"Hello\",\"Hola\",\"Hallo\"), vals = runif(5, 0.4, 1))\nJunk.data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Stuff      vals\n1    Hi 0.7013115\n2 Howdy 0.9750204\n3 Hello 0.9509455\n4  Hola 0.6169967\n5 Hallo 0.6416220\n```\n:::\n:::\n\n\nI want to graph it using a barplot equivalent because I have the height of the bars in `vals`.  Let me use the fill aesthetic to fill the bars in by the five discrete things stored as `Stuff`.  The trick to using it is to manually specify the colors and point it to the `Pigeon.colors` above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(Junk.data) + aes(x=Stuff, y=vals, fill=Stuff) + geom_col() + scale_fill_manual(values = Pigeon.colors) + hrbrthemes::theme_ipsum_rc()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n# References\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::write_bib(names(sessionInfo()$otherPkgs), file=\"bibliography.bib\")\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}