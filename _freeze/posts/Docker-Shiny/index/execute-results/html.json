{
  "hash": "3aa01609a0432532278dc3c2a9b3f3c9",
  "result": {
    "markdown": "---\ntitle: \"Docker and Shiny\"\nauthor: \"Robert W. Walker\"\ndate: \"2023-03-03\"\nimage: \"image.png\"\ntags:\n  - R\n  - docker\n  - shiny\n  - archigos\nbibliography: \"bibliography.bib\"\nnocite: |\n     @*\nformat: \n   html:\n     code-fold: true\n     code-copy: hover\n     code-block-border-left: true\n     df-print: paged\n     fig-format: retina\n     footnotes-hover: true\n     html-math-method: katex\n     toc: true\n     toc-title: Navigation\n     comments:\n        giscus: \n          repo: robertwwalker/robertwwalker.github.io\n---\n\n\n<marquee scrollamount=\"10\"><h1><p style=\"color:purple;\">{{< fa brands r-project >}}obertwwalker.github.io <br></p></h1></marquee>\n\n\n\n\n\nLast updated: 2023-03-06 14:26:23 \n\nTimezone: America/Los_Angeles\n\n## `iframe` and pages\n\n[I built a little proof of concept on equities.](https://robertwwalker.github.io/ReportTQ/index.html)  You can also see it here.\n\n<iframe src=\"https://robertwwalker.github.io/ReportTQ/index.html\" width=\"680\" height=\"600\" allowfullscreen></iframe>\n\n## `iframe` and slides\n\nI built a little proof of concept for slides.  You can see it here.\n\n<iframe src=\"https://robertwwalker.github.io/CWD-Slides/week-6/index.html\" width=\"680\" height=\"600\" allowfullscreen></iframe>\n\n# Docker\n\n`docker` is a tool for setting up a working environment that can house a shiny server.  [Colin Fay has a nice post introducing docker](https://colinfay.me/docker-r-reproducibility/).  [There is also a very nice article on `rocker` by Eddelbuettel and Boettiger.](https://journal.r-project.org/archive/2017/RJ-2017-065/RJ-2017-065.pdf)\n\n# Why not just host your own?\n\nOne can.  The free shiny server can be installed and configured and the process is fairly straightforward.  I am coming to believe that it is simply an easier administration task to let containers handle this.\n\n# Building a docker image\n\nThere are a few steps to this.  \n\n## `shiny-server.conf`\n\nI created a `shiny-server.conf` file to configure the shiny server inside the container.  The contents of the file are below.\n\n```\n# Define the user we should use when spawning R Shiny processes\nrun_as shiny;\n# Define a top-level server which will listen on a port\nserver {\n  # Instruct this server to listen on port 3838.\n  listen 3838;\n# Define the location available at the base URL\n  location / {\n# Run this location in 'site_dir' mode, which hosts the entire directory\n    # tree at '/srv/shiny-server'\n    site_dir /srv/shiny-server;\n    \n    # Define where we should put the log files for this location\n    log_dir /var/log/shiny-server;\n    \n    # Should we list the contents of a (non-Shiny-App) directory when the user \n    # visits the corresponding URL?\n    directory_index on;\n  }\n}\n```\n\n## `shiny-server.sh`\n\nThis file invokes the shiny server.\n\n```\n#!/bin/sh\n# Make sure the directory for individual app logs exists\nmkdir -p /var/log/shiny-server\nchown shiny.shiny /var/log/shiny-server\nexec shiny-server >> /var/log/shiny-server.log 2>&1\n```\n\n## `Dockerfile`\n\nThe dockerfile needs instructions for building R and being able to execute the necessary components.  Here is the Dockerfile.\n\n```\n# get shiny server plus tidyverse packages image\nFROM rocker/shiny-verse:latest\n# system libraries of general use\nRUN apt-get update && apt-get install -y \\\n    sudo \\\n    pandoc \\\n    pandoc-citeproc \\\n    libcurl4-gnutls-dev \\\n    libcairo2-dev \\\n    libxt-dev \\\n    libssl-dev \\\n    libssh2-1-dev\n# install R packages required \n# (change it depending on the packages you need)\nRUN R -e \"install.packages(c('shinydashboard','DT','hrbrthemes','lubridate'), repos='http://cran.rstudio.com/')\"\n# Copy configuration files into the Docker image\nCOPY shiny-server.conf  /etc/shiny-server/shiny-server.conf\nCOPY /app /srv/shiny-server/\nRUN rm /srv/shiny-server/index.html\n# Make the ShinyApp available at port 3838\nEXPOSE 3838\n# Copy further configuration files into the Docker image\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\nRUN [\"chmod\", \"+x\", \"/usr/bin/shiny-server.sh\"]\nCMD [\"/usr/bin/shiny-server.sh\"]\n```\n\n## `app.R`\n\nThe last thing that I require is a functional app.  In this case, my app is three panels applied to `archigos` and an .rda version of the data exists in the container.  Here is the total file.\n\n```\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinydashboard)\nlibrary(tidyverse) \nlibrary(magrittr)\nlibrary(utf8)\nlibrary(shiny)\nlibrary(DT)\nlibrary(lubridate)\nlibrary(hrbrthemes)\n# load the data\nload(\"data/archigos.rda\")\n# create the set of countries\nCountry.Select <- Archigos %$% table(idacr) %>% data.frame() %>% mutate(Country = idacr) %>% select(Country)\n# plot for durations\nPlot.Durations <- function(data, state) {\n  data %>% ggplot(., aes(x=tenureY)) + geom_histogram() + theme_ipsum_rc() + labs(x=\"Durations\", title=paste0(\"Durations: \",state))\n}\n# plot for chronology\nPlot.Chronology <- function(data, state) {\n  data %>% arrange(eindate) %>% \n    ggplot(., aes(x=fct_reorder(leader, eindate), color=leader)) + geom_errorbar(aes(ymin=eindate, ymax=eoutdate)) + coord_flip() + labs(x=\"\", title=paste0(\"Leader Chronology: \",state)) + theme_ipsum_rc() + scale_color_viridis_d(option = \"E\") + guides(color=FALSE)\n}\n\nheader <- dashboardHeader(title = \"Archigos\")\nsidebar <-  dashboardSidebar(\n  sidebarMenu(selectInput(inputId = \"Country\", label=\"Country:\", choices = Country.Select$Country, selected=\"AFG\"))\n)\nbody <- dashboardBody(\n  tabsetPanel(\n    tabItem(tabName = \"dashb1\",\n            title=\"Chronology\",\n            # Boxes need to be put in a row (or column)\n            fluidRow(box(plotOutput(\"plotDur\"), width=12))\n    ),\n    tabItem(tabName = \"dashb2\",\n            title=\"Durations\",\n            fluidRow(box(plotOutput(\"plotChr\"), width=12))\n    )),\n  fluidRow(DTOutput(\"plotDT\"))\n)\nui <- dashboardPage(skin = \"purple\", header, sidebar, body)\n\nserver <- function(input, output) {\n  dataset <- reactive({\n    Archigos %>% \n      filter(idacr==input$Country) %>% \n      arrange(desc(eoutdate))\n  })\n  output$plotDT <- renderDT({  dataset()}, options = list(scrollX = TRUE) \n  )\n  output$plotDur <- renderPlot({\n    Plot.Chronology(dataset(), input$country)\n  })\n  output$plotChr <- renderPlot({\n    Plot.Durations(dataset(), input$country)\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n```\n\n## Building the docker container\n\nAt the terminal, here I need to build the docker image.\n\n```\nsudo docker build image -t pieratio/archigos\n```\n\n## Pushing to a docker hub\n\nThe first one is to go to [docker hub](https://hub.docker.com).  I have an account that has a single container currently there called `archigos`.\n\n## Google cloud services\n\nNext we wander off to cloud.google.com and enable containers for use in `Cloud Run`.  I then set up the project called `archigos` attached to port 3838 and set it to run.  Now I have a running shiny app in the cloud on google to tie to this post!\n\n## The app\n\n<iframe src=\"https://archigos-geiwez4tia-uc.a.run.app/\" width=\"680\" height=\"600\" allowfullscreen></iframe>\n\n\n## Another Example\n\n<iframe src=\"https://shinytick-geiwez4tia-uc.a.run.app\" width=\"680\" height=\"600\" allowfullscreen></iframe>\n\n\n\n# References\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::write_bib(names(sessionInfo()$otherPkgs), file=\"bibliography.bib\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}