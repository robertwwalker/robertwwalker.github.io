{
  "hash": "9cca144c13250bf49e55db5f4a537f36",
  "result": {
    "markdown": "---\ntitle: Updating R and R Packages\ndate: 2023-10-23\ntitle-block-banner: false \nimage: \"image.png\"\ncode-fold: true\ncomments:\n   giscus: \n     repo: robertwwalker/robertwwalker.github.io\n---\n\n\n<marquee scrollamount=\"10\"><h1><p style=\"color:purple;\">{{< fa brands r-project >}}obertwwalker.github.io <br></p></h1></marquee>\n\n\n\n\n\n\n# Updating R\n\nI find updating R to be unnecessarily time-consuming.  Much of this is my fault; I do not make good choices about packages and their management.  Nevertheless, in my never ending pursuit of engineering solutions to my bad choices, I decided to document a fairly easy workflow for updating and getting a nearly identical updated system.  Here are the steps.\n\n## 1. What packages have I installed?\n\nI will define an R object `I1` [a data.frame with a single character variable `InstPack`]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nI1 <- data.frame(InstPack = installed.packages()[,1])\n```\n:::\n\n\n## 2. Save that set of packages\n\nFrom here, I need to save this in an accessible location.\n\n```\nsave(I1, file=\"InstalledPackagesNov2023.RData\")\n```\n\n## 3. Go to CRAN and update R\n\nGo to [CRAN](https://cran.r-project.org/) and follow the relevant choices to the required option.  Download the file and install it.\n\n## 4. Start the new R\n\nClick on it.  Or open RStudio.\n\n## 5. Load the set of installed packages\n\n```\nload(\"InstalledPackagesNov2023.RData\")\n```\n\n## 6. Install the set of packages\n\nthe `purrr::walk`function is very handy.\n\n```\ninstall.packages(\"purrr\")\npurrr::walk(I1$InstPack, ~install.packages(.x))\n```\n\nThis will take a while as R attempts to go through and, one by one, install them.\n\nOnce this is complete, I need two more things.\n\n## 7. The set of installed packages \n\nIn this case, let me create the set of installed packages on this new installation in `I2`.\n\n```\nI2 <- data.frame(InstPack = installed.packages()[,1])\n```\n\n## 8. An anti-join\n\n`dplyr` has an anti-join function that is one of a few ways to find the packages that did not install.  \n\n```\nremainder <- dplyr::anti_join(I1, I2)\nremainder\n```\n\n![Failed Installs](Fails.png)\n\nNow I know what to go searching for on github because that is where the missing packages come from.\n\n## 9. A postscript\n\nNow I can get smart about this part also.  In the process of searching for these, it became useful to go ahead and create an amendable collection of locations for these.  For example, `d3scatter`.\n\n![d3scatter](d3scatter.png)\n\n```\nremainder[\"d3scatter\",\"loc\"] <- \"jcheng5/d3scatter\"\n```\n\nThis is painstaking; past me was unkind to present me in not doing this before.  But as long as I save it, or the code in this blog post, then I can recover it all.\n\nAfter filling in the `loc` column in `remainder`, I can `walk` it with `walk(remainder$loc, ~devtools::install_github(.x))`.\n\n\n```\nremainder[\"dsbox\",\"loc\"] <- \"tidyverse/dsbox\"\nremainder[\"distilltools\",\"loc\"] <- \"EllaKaye/distilltools\"\nremainder[\"emo\",\"loc\"] <- \"hadley/emo\"\nremainder[\"emoGG\",\"loc\"] <- \"dill/emoGG\"\nremainder[\"equatiomatic\",\"loc\"] <- \"datalorax/equatiomatic\"\nremainder[\"flexpivot\",\"loc\"] <- \"dreamRs/flexpivot\"\nremainder[\"frailtypack\",\"loc\"] <- \"socale/frailtypack\"\nremainder[\"ggflags\",\"loc\"] <- \"jimjam-slam/ggflags\"\nremainder[\"gradethis\",\"loc\"] <- \"rstudio/gradethis\"\nremainder[\"LogisticDx\",\"loc\"] <- \"dardisco/LogisticDx\"\nremainder[\"maptools\",\"loc\"] <- \"\"\nremainder[\"ResampleProps\",\"loc\"] <- \"robertwwalker/ResampleProps\"\nremainder[\"rgeos\",\"loc\"] <- \"\"\nremainder[\"rgdal\",\"loc\"] <- \"\"\nremainder[\"sankeytreeR\",\"loc\"] <- \"timelyportfolio/sankeytree\"\n```\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}