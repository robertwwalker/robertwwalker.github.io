[
  {
    "objectID": "where.html",
    "href": "where.html",
    "title": "Where",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nContact obert\n\n\n\nAppointments\nEmail\n\nZoom\nGoogle Scholar\nOffice Hours: 1300 to 1500 Pacific time on Wednesdays"
  },
  {
    "objectID": "posts/Pigeons-Pallettes/index.html#imgpalr",
    "href": "posts/Pigeons-Pallettes/index.html#imgpalr",
    "title": "Pigeons and Palettes",
    "section": "imgpalr",
    "text": "imgpalr\n has a package called imgpalr that will extract colors from an image. If I need to, it is install.packages(\"imgpalr\").\nIn the following code chunk, I will load the package and then I want to point it to the pigeon image that I downloaded. In my case, it is in the same directory as the R Markdown file and is called Pigeon.png.\nInside the command image_pal(), I point it to an image, I specify how many colors [5], what type of color scheme, I want qualitative, and then some characteristics of the colors. The plot will show me the image alongside the palette though it is upside down.\n\n\nHow’s that done?\nlibrary(imgpalr)\nPigeon.colors &lt;- image_pal(\"img/Pigeon.png\", # This will need to be adjusted to the actual file location on your computer.  Mine is in my downloads.\n          n = 5, # How many colors?\n          type = \"qual\", # Type of palette?\n          saturation = c(0.75, 1), \n          brightness = c(0.75, 1), \n          plot = TRUE, # Show the image and the palette?\n          bw = c(0.7, 0.95)\n          )\n\n\n\n\n\nHow’s that done?\nPigeon.colors\n\n\n[1] \"#AF98E6\" \"#DA99E6\" \"#E5DD97\" \"#DD92C5\" \"#9CA6E3\"\n\n\nNow I have a palette in the markdown environment called Pigeon.colors."
  },
  {
    "objectID": "posts/Pigeons-Pallettes/index.html#data-to-plot",
    "href": "posts/Pigeons-Pallettes/index.html#data-to-plot",
    "title": "Pigeons and Palettes",
    "section": "Data to plot",
    "text": "Data to plot\nNow I need some data; I want five categories to match my palette. The rest is junk.\n\n\nHow’s that done?\nJunk.data &lt;- data.frame(Stuff=c(\"Hi\",\"Howdy\",\"Hello\",\"Hola\",\"Hallo\"), vals = runif(5, 0.4, 1))\nJunk.data\n\n\n  Stuff      vals\n1    Hi 0.7013115\n2 Howdy 0.9750204\n3 Hello 0.9509455\n4  Hola 0.6169967\n5 Hallo 0.6416220\n\n\nI want to graph it using a barplot equivalent because I have the height of the bars in vals. Let me use the fill aesthetic to fill the bars in by the five discrete things stored as Stuff. The trick to using it is to manually specify the colors and point it to the Pigeon.colors above.\n\n\nHow’s that done?\nlibrary(ggplot2)\nggplot(Junk.data) + aes(x=Stuff, y=vals, fill=Stuff) + geom_col() + scale_fill_manual(values = Pigeon.colors) + hrbrthemes::theme_ipsum_rc()"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html",
    "href": "posts/Docker-Shiny/index.html",
    "title": "Docker and Shiny",
    "section": "",
    "text": "Last updated: 2023-04-06 03:04:17\nTimezone: America/Los_Angeles\nWhen it comes to shiny applications, hosting is a perennial concern. The free alternative shinyapps.io works great but limits the number of user applications that can be deployed. One can operate a server and serve the shiny applications for one’s self. To be honest, this solution is probably superior but is also costly insofar as system administration consumes time. There is an in between that is worth exploring.\nWe could link to the apps and deploy them in the cloud. The most common methods for accomplishing this particular task involve Docker containers and using Docker to run the shiny applications. I want to explore this alternative in what follows."
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#shiny-server.conf",
    "href": "posts/Docker-Shiny/index.html#shiny-server.conf",
    "title": "Docker and Shiny",
    "section": "shiny-server.conf",
    "text": "shiny-server.conf\nI created a shiny-server.conf file to configure the shiny server inside the container. The contents of the file are below.\n# Define the user we should use when spawning R Shiny processes\nrun_as shiny;\n# Define a top-level server which will listen on a port\nserver {\n  # Instruct this server to listen on port 3838.\n  listen 3838;\n# Define the location available at the base URL\n  location / {\n# Run this location in 'site_dir' mode, which hosts the entire directory\n    # tree at '/srv/shiny-server'\n    site_dir /srv/shiny-server;\n    \n    # Define where we should put the log files for this location\n    log_dir /var/log/shiny-server;\n    \n    # Should we list the contents of a (non-Shiny-App) directory when the user \n    # visits the corresponding URL?\n    directory_index on;\n  }\n}"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#shiny-server.sh",
    "href": "posts/Docker-Shiny/index.html#shiny-server.sh",
    "title": "Docker and Shiny",
    "section": "shiny-server.sh",
    "text": "shiny-server.sh\nThis file invokes the shiny server.\n#!/bin/sh\n# Make sure the directory for individual app logs exists\nmkdir -p /var/log/shiny-server\nchown shiny.shiny /var/log/shiny-server\nexec shiny-server &gt;&gt; /var/log/shiny-server.log 2&gt;&1"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#dockerfile",
    "href": "posts/Docker-Shiny/index.html#dockerfile",
    "title": "Docker and Shiny",
    "section": "Dockerfile",
    "text": "Dockerfile\nThe dockerfile needs instructions for building R and being able to execute the necessary components. Here is the Dockerfile.\n# get shiny server plus tidyverse packages image\nFROM rocker/shiny-verse:latest\n# system libraries of general use\nRUN apt-get update && apt-get install -y \\\n    sudo \\\n    pandoc \\\n    pandoc-citeproc \\\n    libcurl4-gnutls-dev \\\n    libcairo2-dev \\\n    libxt-dev \\\n    libssl-dev \\\n    libssh2-1-dev\n# install R packages required \n# (change it depending on the packages you need)\nRUN R -e \"install.packages(c('shinydashboard','DT','hrbrthemes','lubridate'), repos='http://cran.rstudio.com/')\"\n# Copy configuration files into the Docker image\nCOPY shiny-server.conf  /etc/shiny-server/shiny-server.conf\nCOPY /app /srv/shiny-server/\nRUN rm /srv/shiny-server/index.html\n# Make the ShinyApp available at port 3838\nEXPOSE 3838\n# Copy further configuration files into the Docker image\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\nRUN [\"chmod\", \"+x\", \"/usr/bin/shiny-server.sh\"]\nCMD [\"/usr/bin/shiny-server.sh\"]"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#app.r",
    "href": "posts/Docker-Shiny/index.html#app.r",
    "title": "Docker and Shiny",
    "section": "app.R",
    "text": "app.R\nThe last thing that I require is a functional app. In this case, my app is three panels applied to archigos and an .rda version of the data exists in the container. Here is the total file.\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinydashboard)\nlibrary(tidyverse) \nlibrary(magrittr)\nlibrary(utf8)\nlibrary(shiny)\nlibrary(DT)\nlibrary(lubridate)\nlibrary(hrbrthemes)\n# load the data\nload(\"data/archigos.rda\")\n# create the set of countries\nCountry.Select &lt;- Archigos %$% table(idacr) %&gt;% data.frame() %&gt;% mutate(Country = idacr) %&gt;% select(Country)\n# plot for durations\nPlot.Durations &lt;- function(data, state) {\n  data %&gt;% ggplot(., aes(x=tenureY)) + geom_histogram() + theme_ipsum_rc() + labs(x=\"Durations\", title=paste0(\"Durations: \",state))\n}\n# plot for chronology\nPlot.Chronology &lt;- function(data, state) {\n  data %&gt;% arrange(eindate) %&gt;% \n    ggplot(., aes(x=fct_reorder(leader, eindate), color=leader)) + geom_errorbar(aes(ymin=eindate, ymax=eoutdate)) + coord_flip() + labs(x=\"\", title=paste0(\"Leader Chronology: \",state)) + theme_ipsum_rc() + scale_color_viridis_d(option = \"E\") + guides(color=FALSE)\n}\n\nheader &lt;- dashboardHeader(title = \"Archigos\")\nsidebar &lt;-  dashboardSidebar(\n  sidebarMenu(selectInput(inputId = \"Country\", label=\"Country:\", choices = Country.Select$Country, selected=\"AFG\"))\n)\nbody &lt;- dashboardBody(\n  tabsetPanel(\n    tabItem(tabName = \"dashb1\",\n            title=\"Chronology\",\n            # Boxes need to be put in a row (or column)\n            fluidRow(box(plotOutput(\"plotDur\"), width=12))\n    ),\n    tabItem(tabName = \"dashb2\",\n            title=\"Durations\",\n            fluidRow(box(plotOutput(\"plotChr\"), width=12))\n    )),\n  fluidRow(DTOutput(\"plotDT\"))\n)\nui &lt;- dashboardPage(skin = \"purple\", header, sidebar, body)\n\nserver &lt;- function(input, output) {\n  dataset &lt;- reactive({\n    Archigos %&gt;% \n      filter(idacr==input$Country) %&gt;% \n      arrange(desc(eoutdate))\n  })\n  output$plotDT &lt;- renderDT({  dataset()}, options = list(scrollX = TRUE) \n  )\n  output$plotDur &lt;- renderPlot({\n    Plot.Chronology(dataset(), input$country)\n  })\n  output$plotChr &lt;- renderPlot({\n    Plot.Durations(dataset(), input$country)\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#building-the-docker-container",
    "href": "posts/Docker-Shiny/index.html#building-the-docker-container",
    "title": "Docker and Shiny",
    "section": "Building the docker container",
    "text": "Building the docker container\nAt the terminal, here I need to build the docker image.\nsudo docker build image -t pieratio/archigos"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#pushing-to-a-docker-hub",
    "href": "posts/Docker-Shiny/index.html#pushing-to-a-docker-hub",
    "title": "Docker and Shiny",
    "section": "Pushing to a docker hub",
    "text": "Pushing to a docker hub\nThe first one is to go to docker hub. I have an account that has a single container currently there called archigos."
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#google-cloud-services",
    "href": "posts/Docker-Shiny/index.html#google-cloud-services",
    "title": "Docker and Shiny",
    "section": "Google cloud services",
    "text": "Google cloud services\nNext we wander off to cloud.google.com and enable containers for use in Cloud Run. I then set up the project called archigos attached to port 3838 and set it to run. Now I have a running shiny app in the cloud on google to tie to this post!"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#the-app",
    "href": "posts/Docker-Shiny/index.html#the-app",
    "title": "Docker and Shiny",
    "section": "The app",
    "text": "The app"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#another-example",
    "href": "posts/Docker-Shiny/index.html#another-example",
    "title": "Docker and Shiny",
    "section": "Another Example",
    "text": "Another Example"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#one-that-uses-.rmd-flexdashboard",
    "href": "posts/Docker-Shiny/index.html#one-that-uses-.rmd-flexdashboard",
    "title": "Docker and Shiny",
    "section": "One that Uses .Rmd FlexDashboard",
    "text": "One that Uses .Rmd FlexDashboard\nDeploying this container is tricky because of the overall size of the project. I have to limit the number of instances and kick up the amount of usable RAM to make it work. The margins of this page do not render this super well. It is better seen at the host site for that repository."
  },
  {
    "objectID": "posts/parameterized-markdown/index.html",
    "href": "posts/parameterized-markdown/index.html",
    "title": "Parameterizing Markdown",
    "section": "",
    "text": "Last updated: 2023-03-17 09:32:00\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/parameterized-markdown/index.html#iframe-and-pages",
    "href": "posts/parameterized-markdown/index.html#iframe-and-pages",
    "title": "Parameterizing Markdown",
    "section": "iframe and pages",
    "text": "iframe and pages\nI built a little proof of concept on equities. You can also see it here."
  },
  {
    "objectID": "posts/parameterized-markdown/index.html#iframe-and-slides",
    "href": "posts/parameterized-markdown/index.html#iframe-and-slides",
    "title": "Parameterizing Markdown",
    "section": "iframe and slides",
    "text": "iframe and slides\nI built a little proof of concept for slides. You can see it here."
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html",
    "href": "posts/Transparency-Shiny/index.html",
    "title": "A Shiny on Corruption Data",
    "section": "",
    "text": "Last updated: 2023-04-14 03:01:00\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html#transparency-data",
    "href": "posts/Transparency-Shiny/index.html#transparency-data",
    "title": "A Shiny on Corruption Data",
    "section": "Transparency Data",
    "text": "Transparency Data\nTransparency International provides a wealth of interesting data; I want to work with their Corruption Perceptions Index. The data can be obtained in an Excel spreadsheet. Here’s a brief shot of the file. The main object of interest, throughout, is the cpi_score – the corruption perception index.\n\n\n\nExcel file\n\n\nThese data have a first two rows that will need to be skipped and the names are terrible but we can use janitor’s clean_names to take care of that. The other thing to notice is three sheets. The second sheet will need some tidying and the third sheet is not all that interesting, to me. Let’s import the first one.\n\n\nHow’s that done?\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(DT)\nlibrary(htmltools)\nCPI22 &lt;- readxl::read_excel(path=\"data/CPI2022_GlobalResultsTrends.xlsx\", sheet=1, skip=2) %&gt;% clean_names()\ndatatable(CPI22)\n\n\n\n\n\n\n\nWe also have the time series data. Let’s first import them.\n\n\nHow’s that done?\nCPI.Time &lt;- readxl::read_excel(path=\"data/CPI2022_GlobalResultsTrends.xlsx\", sheet=2, skip=2) %&gt;% clean_names()\ndatatable(CPI.Time)\n\n\n\n\n\n\n\nThese data require some tidying with pivot_longer; we will want to grab a cpi_score, rank, sources, and standard_error for each year that we have data. It is worth noting that the ranks only go back to 2017. There are harder and easier ways to do this. I wrote a quick function to take two inputs and then pivot each of the four series separately.\n\n\nHow’s that done?\ncleaner &lt;- function(data, string) {\n  # Start with the data\n  data %&gt;%\n  # Use the iso3 as ID and keep everything that starts with string\n    select(iso3, starts_with(string)) %&gt;%\n    # pivot those variables except iso3\n  pivot_longer(.,\n                    cols=-iso3,\n               # names_prefix needs to remove string_\n                    names_prefix = paste0(string,\"_\",sep=\"\"),\n               # make what's left of the names the year -- it will be a four digit year\n                    names_to = \"year\",\n              # make the values named string\n                    values_to=string)\n}\nCPI.TS.Tidy &lt;- cleaner(CPI.Time,\"cpi_score\")\nSources.TS.Tidy &lt;- cleaner(CPI.Time,\"sources\")\nStdErr.TS.Tidy &lt;- cleaner(CPI.Time,\"standard_error\")\nRank.TS.Tidy &lt;- cleaner(CPI.Time, \"rank\")\n\n\nNow I can join them back together.\n\n\nHow’s that done?\nPanel &lt;- left_join(CPI.TS.Tidy, Sources.TS.Tidy) %&gt;% left_join(., StdErr.TS.Tidy) %&gt;% left_join(Rank.TS.Tidy) %&gt;% mutate(year = as.integer(year))\nrm(CPI.TS.Tidy, Sources.TS.Tidy, StdErr.TS.Tidy, Rank.TS.Tidy)\n\n\nThe third sheet is a set of statistically significant changes that I do not so much care about."
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html#a-summary",
    "href": "posts/Transparency-Shiny/index.html#a-summary",
    "title": "A Shiny on Corruption Data",
    "section": "A Summary",
    "text": "A Summary\n\n\nHow’s that done?\nlibrary(skimr)\nPanel %&gt;% skim()\n\n\n\nData summary\n\n\nName\nPiped data\n\n\nNumber of rows\n1991\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\niso3\n0\n1\n3\n3\n0\n181\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nyear\n0\n1.00\n2017.00\n3.16\n2012.00\n2014.00\n2017.00\n2020.00\n2022.00\n▇▅▅▅▅\n\n\ncpi_score\n42\n0.98\n43.03\n19.27\n8.00\n29.00\n38.00\n56.00\n92.00\n▃▇▅▂▂\n\n\nsources\n42\n0.98\n6.72\n1.84\n3.00\n5.00\n7.00\n8.00\n10.00\n▃▂▇▅▃\n\n\nstandard_error\n42\n0.98\n2.89\n1.55\n0.41\n1.85\n2.51\n3.49\n12.81\n▇▅▁▁▁\n\n\nrank\n911\n0.54\n89.04\n51.63\n1.00\n45.00\n87.00\n132.50\n180.00\n▇▇▇▇▇"
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html#a-map",
    "href": "posts/Transparency-Shiny/index.html#a-map",
    "title": "A Shiny on Corruption Data",
    "section": "A Map",
    "text": "A Map\n\n\nHow’s that done?\nlibrary(\"rnaturalearth\")\nlibrary(\"rnaturalearthdata\")\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n# create world map using ggplot() function\nggplot(world) +\n    geom_sf(fill=\"pink\", color=\"black\", size=0.1, alpha=0.2) +\n    theme_void() +\n  labs(title=\"A Starting Point\")"
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html#join-the-map-and-the-data",
    "href": "posts/Transparency-Shiny/index.html#join-the-map-and-the-data",
    "title": "A Shiny on Corruption Data",
    "section": "Join the Map and the Data",
    "text": "Join the Map and the Data\nThe sf package has special merge methods that I will deploy to combine the two bits of data.\n\n\nHow’s that done?\nMap.Data &lt;- merge(world, Panel, by.x=\"iso_a3\", by.y= \"iso3\")\n\n\nNow to draw a map.\n\n\nHow’s that done?\n# create world map using ggplot() function\nMap.Data &lt;- Map.Data %&gt;% mutate(tooltip = paste0(sovereignt,\"&lt;br&gt;\",year,\"&lt;br&gt;CPI: \",cpi_score, sep=\"\"))\nMap.Res &lt;- Map.Data %&gt;% \n  dplyr::filter(year==2022L) %&gt;% \n  ggplot(.) +\n    geom_sf(aes(fill=cpi_score, text=tooltip), size=0.1, alpha=0.8) +\n  scale_fill_viridis_c() +\n    theme_void() +\n  labs(title=\"Perceived Corruption around the World in 2022\",\n       caption=\"Data from Transparency International\",\n       fill = \"CPI\") + theme(legend.position=\"bottom\")\nMap.Res\n\n\n\n\n\n\n\nHow’s that done?\nlibrary(plotly)\nggplotly(Map.Res, tooltip = \"text\")\n\n\n\n\n\n\nggplotly is neat but it has periodic bugs; in the end, it was much better to rewrite in the plotly interface, as you will see at the bottom."
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html#adding-a-table",
    "href": "posts/Transparency-Shiny/index.html#adding-a-table",
    "title": "A Shiny on Corruption Data",
    "section": "Adding a table",
    "text": "Adding a table\nI wanted to add in a table both to follow the assignment instructions and because I wanted to be able to look at some elements in a tabular comparison. It was also an excuse to learn a bit of reactable. This isn’t a very good example of what it will look like in the shiny because the filters will help keep the table of manageable size.\n\n\nHow’s that done?\nbar_chart &lt;- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar &lt;- div(style = list(background = fill, width = width, height = height))\n  chart &lt;- div(style = list(flexGrow = 1, marginLeft = \"0.5rem\", background = background), bar)\n  div(style = list(display = \"flex\", alignItems = \"center\"), label, chart)\n}\n\norange_pal &lt;- function(x) rgb(colorRamp(c(\"#ffe4cc\", \"#ffb54d\"))(x), maxColorValue = 255)\n\nlibrary(reactable)\nMap.Data |&gt; filter(year == 2020) |&gt; reactable(\n              groupBy = \"region_un\",\n              defaultColDef = colDef(show = F),\n              columns = list(\n                country_territory = colDef(show=T,\n                                           name = \"Country Name\"),\n                year = colDef(show=T, name = \"Year\"),\n                region_un = colDef(show=T, name = \"Region\"),\n                CPI = colDef(show=T, name=\"Corruption Perception Index\"),\n                Rank = colDef(show=T,\n                              style = function(value) {\n                                normalized &lt;- scale(value, scale=FALSE)\n                                color &lt;- orange_pal(value/181)\n                                list(background = color, color = \"black\")\n                              }\n                ), \n                standard_error = colDef(show=T,\n                                        name = \"Standard Deviation of CPI\"),\n                sources = colDef(show=T,\n                                 name = \"No. of Sources\",\n                                 align = \"left\", \n                                 cell = function(value) {\n                                   width &lt;- paste0(value*10,\"%\")\n                                   bar_chart(value, width = width)\n                                 })\n                ),\n              theme = reactableTheme(\n                color = \"hsl(233, 9%, 87%)\",\n                backgroundColor = \"hsl(233, 9%, 19%)\",\n                borderColor = \"hsl(233, 9%, 22%)\",\n                stripedColor = \"hsl(233, 12%, 22%)\",\n                highlightColor = \"hsl(233, 12%, 24%)\",\n                inputStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),\n                selectStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),\n                pageButtonHoverStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),\n                pageButtonActiveStyle = list(backgroundColor = \"hsl(233, 9%, 28%)\")\n                )\n              )"
  },
  {
    "objectID": "posts/Transparency-Shiny/index.html#the-app",
    "href": "posts/Transparency-Shiny/index.html#the-app",
    "title": "A Shiny on Corruption Data",
    "section": "The app",
    "text": "The app\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(reactable)\nlibrary(plotly)\nlibrary(viridis)\nlibrary(shinythemes)\nlibrary(htmltools)\n\n# Load the multiperiod data\nCPI.Time &lt;- readxl::read_excel(path=\"data/CPI2022_GlobalResultsTrends.xlsx\", sheet=2, skip=2) %&gt;% clean_names()\n# create a cleaner function to clean the data\ncleaner &lt;- function(data, string) {\n  # Start with the data\n  data |&gt;\n    # Use the iso3 as ID and keep everything that starts with string\n    select(iso3, starts_with(string)) |&gt;\n    # pivot those variables except iso3\n    pivot_longer(cols=-iso3,\n                 # names_prefix needs to remove string_\n                 names_prefix = paste0(string,\"_\",sep=\"\"),\n                 # make what's left of the names the year -- it will be a four digit year\n                 names_to = \"year\",\n                 # make the values named string\n                 values_to=string)\n}\n# Clean the panel data\nCPI.TS.Tidy &lt;- cleaner(CPI.Time,\"cpi_score\")\nSources.TS.Tidy &lt;- cleaner(CPI.Time,\"sources\")\nStdErr.TS.Tidy &lt;- cleaner(CPI.Time,\"standard_error\")\nRank.TS.Tidy &lt;- cleaner(CPI.Time, \"rank\")\n# Join together the panel data\nPanel.FJ &lt;- left_join(CPI.TS.Tidy, Sources.TS.Tidy) |&gt; \n  left_join(StdErr.TS.Tidy) |&gt; \n  left_join(Rank.TS.Tidy) |&gt;\n  mutate(year = as.integer(year)) |&gt;\n  filter(year &gt; 2016)\nrm(CPI.TS.Tidy, Sources.TS.Tidy, StdErr.TS.Tidy, Rank.TS.Tidy)\n\n# Map Stuff\n\nlibrary(\"rnaturalearth\")\nlibrary(\"rnaturalearthdata\")\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\n\n# Join the data to the map\nNames.Merge &lt;- CPI.Time |&gt; select(iso3, country_territory, region)\nPanel &lt;- left_join(Panel.FJ, Names.Merge) |&gt; \n  relocate(where(is.character)) # |&gt;\nMap.Data &lt;- merge(world, Panel, by.x=\"iso_a3\", by.y= \"iso3\")\nMap.Data &lt;- Map.Data |&gt; \n  mutate(tooltip = paste0(sovereignt,\"&lt;br&gt;\",year,\"&lt;br&gt;CPI: \",cpi_score, \"&lt;br&gt;Rank: \",rank, sep=\"\")) |&gt;\n  rename(Rank = rank) |&gt; \n  rename(CPI = cpi_score) |&gt;\n  group_by(region_un, year) |&gt; \n  mutate(sCPI = scale(CPI, scale = FALSE)) |&gt;\n  ungroup() |&gt;\n  mutate(standard_error = round(standard_error, 3)) |&gt;\n  select(iso_a3, country_territory, year, region_un, CPI, sCPI, Rank, standard_error, sources, tooltip, geometry) \nrm(Panel.FJ, Names.Merge)\n\nMap.Data &lt;- na.omit(Map.Data)\n\nbar_chart_pos_neg &lt;- function(label, value, max_value = 50, height = \"1rem\",\n                              pos_fill = \"green\", neg_fill = \"red\") {\n  neg_chart &lt;- div(style = list(flex = \"1 1 0\"))\n  pos_chart &lt;- div(style = list(flex = \"1 1 0\"))\n  width &lt;- paste0(abs(value / max_value) * 100, \"%\")\n  \n  if (value &lt; 0) {\n    bar &lt;- div(style = list(marginLeft = \"0.5rem\", background = neg_fill, width = width, height = height))\n    chart &lt;- div(\n      style = list(display = \"flex\", alignItems = \"center\", justifyContent = \"flex-end\"),\n      label,\n      bar\n    )\n    neg_chart &lt;- tagAppendChild(neg_chart, chart)\n  } else {\n    bar &lt;- div(style = list(marginRight = \"0.5rem\", background = pos_fill, width = width, height = height))\n    chart &lt;- div(style = list(display = \"flex\", alignItems = \"center\"), bar, label)\n    pos_chart &lt;- tagAppendChild(pos_chart, chart)\n  }\n  \n  div(style = list(display = \"flex\"), neg_chart, pos_chart)\n}\n\nbar_chart &lt;- function(label, width = \"100%\", height = \"1rem\", fill = \"#00bfc4\", background = NULL) {\n  bar &lt;- div(style = list(background = fill, width = width, height = height))\n  chart &lt;- div(style = list(flexGrow = 1, marginLeft = \"0.5rem\", background = background), bar)\n  div(style = list(display = \"flex\", alignItems = \"center\"), label, chart)\n}\n\norange_pal &lt;- function(x) rgb(colorRamp(c(\"#ffe4cc\", \"#ffb54d\"))(x), maxColorValue = 255)\n\n# Define UI for application\nui &lt;- fluidPage(theme=shinytheme(\"darkly\"),\n  tabsetPanel(\n    tabPanel(\"Plotly\",\n    plotlyOutput(\"distPlot\", height=\"650px\")\n    ),\n  tabPanel(\"Data\",\n    reactableOutput(\"DT\")\n  )),\n    # Sidebar with a slider input for number of bins \n    fluidRow(\n        column(width=4,\n            radioButtons(\"pal\",\n                        \"Viridis Palette:\",\n                        choices = c(LETTERS[1:5]),\n                        selected = \"D\",\n                        inline = TRUE\n                        )),\n        column(width=4, \n               selectInput(\"var\",\n                        \"Variable\",\n                        choices = list(\"Corruption Index\" = \"CPI\",\n                                       \"Rank\" = \"Rank\",\n                                       \"No. of Sources\" = \"sources\",\n                                       \"Std. Error\" = \"standard_error\"),\n                        selected = \"CPI\"),\n               print(\n                 HTML(\"&lt;small&gt;Corruption Index: Corruption Perceptions Index (CPI) &lt;br/&gt; \n                      Rank: Ranking, Best to Worst &lt;br/&gt;\n                      No. of Sources: Number of Sources for CPI &lt;br/&gt;\n                      Std. Error: Variability of CPI&lt;/small&gt;\"))),\n        column(width=4,\n            sliderInput(\"year\",\n                        \"Year\",\n                        min = 2017,\n                        max= 2022,\n                        value = 2022)\n            )\n    )\n)\n\nserver &lt;- function(input, output, session) {\n  Map.Me &lt;- reactive({Map.Data |&gt; filter(year==input$year)})\n  output$DT &lt;- renderReactable(\n    reactable(Map.Me(), \n              groupBy = \"region_un\",\n              defaultColDef = colDef(show = F),\n              columns = list(\n                country_territory = colDef(show=T,\n                                           name = \"Country Name\"),\n                year = colDef(show=T, name = \"Year\"),\n                region_un = colDef(show=T, name = \"Region\"),\n                CPI = colDef(show=T, name=\"Corruption Perception Index\"),\n                sCPI = colDef(show=T,\n                  name = \"Scaled Corruption\",\n                  cell = function(value) {\n                    label &lt;- paste(round(value, digits=2))\n                    bar_chart_pos_neg(label, value)\n                  }),\n                Rank = colDef(show=T,\n                              style = function(value) {\n                                normalized &lt;- scale(value, scale=FALSE)\n                                color &lt;- orange_pal(value/181)\n                                list(background = color, color = \"black\")\n                              }\n                ), \n                standard_error = colDef(show=T,\n                                        name = \"Standard Deviation of CPI\"),\n                sources = colDef(show=T,\n                                 name = \"No. of Sources\",\n                                 align = \"left\", \n                                 cell = function(value) {\n                                   width &lt;- paste0(value*10,\"%\")\n                                   bar_chart(value, width = width)\n                                 })\n                ),\n              theme = reactableTheme(\n                color = \"hsl(233, 9%, 87%)\",\n                backgroundColor = \"hsl(233, 9%, 19%)\",\n                borderColor = \"hsl(233, 9%, 22%)\",\n                stripedColor = \"hsl(233, 12%, 22%)\",\n                highlightColor = \"hsl(233, 12%, 24%)\",\n                inputStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),\n                selectStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),\n                pageButtonHoverStyle = list(backgroundColor = \"hsl(233, 9%, 25%)\"),\n                pageButtonActiveStyle = list(backgroundColor = \"hsl(233, 9%, 28%)\")\n                )\n              )\n    )\n  output$distPlot &lt;- renderPlotly({\n      plot_geo(Map.Me(),\n               hovertext=~tooltip) |&gt;\n        add_trace(\n          z = ~get(input$var), \n          locations = ~iso_a3,\n          color = ~get(input$var), \n          colors = viridis_pal(option = input$pal)(3)\n        ) |&gt; \n        layout(\n          geo = list(showframe=FALSE)) |&gt;\n          colorbar(title = paste(input$var, \"in\", input$year))\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\nA Link to the App"
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#load-the-data-and-libraries",
    "href": "posts/HumanRightsTable/index.html#load-the-data-and-libraries",
    "title": "Human Rights Protections–Tables",
    "section": "Load the Data and Libraries",
    "text": "Load the Data and Libraries\n\n\nHow’s that done?\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(DT)\nlibrary(gt)\nlibrary(gtExtras)\n# install with remotes::install_github(\"jimjam-slam/ggflags\")\nlibrary(countrycode)\nlibrary(ggflags) \nload(\"data/HumanRightsProtectionScores_v4.01.Rdata\")\nHR.Data &lt;- x\nrm(x)\nHR.Data &lt;- HR.Data %&gt;% left_join(., codelist, by= c(\"COW\" = \"cown\"))\n\n\nLet me now put the data into a browseable table."
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#a-browsable-datatable",
    "href": "posts/HumanRightsTable/index.html#a-browsable-datatable",
    "title": "Human Rights Protections–Tables",
    "section": "A Browsable DataTable",
    "text": "A Browsable DataTable\nThis is a panel data structure with two dimensions: countries and years. As a result, though there are not all that many countries in the world, each country is potentially repeated up to 74 times [1946 to 2019]. The filter boxes at the bottom allow you to select ranges of the quantitative indicators.\n\n\nHow’s that done?\nHR.Data %&lt;&gt;% \n  mutate(country.name.en = as.factor(country.name.en))\nHR.Data %&gt;% \n    arrange(country.name.en, YEAR) %&gt;%\n  select(`Country` = country.name.en, `Year` = YEAR, `Human Rights (mean)` = theta_mean, `Human Rights (std. dev.)` = theta_sd, `Killing (mean)` = killing_estimate_mean, `Killing (median)` = killing_estimate_median) %&gt;%\n  datatable(., filter = \"bottom\", extensions = 'Buttons', options = list(\n    dom = 'Bfrtip',\n    buttons = c('copy', 'csv', 'excel'), \n  initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#131F4F', 'color': '#fff'});\",\n    \"}\")\n)) %&gt;%\n  formatRound(., 3:6)"
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#a-starter-table",
    "href": "posts/HumanRightsTable/index.html#a-starter-table",
    "title": "Human Rights Protections–Tables",
    "section": "A Starter Table",
    "text": "A Starter Table\n\n\nHow’s that done?\nHR.Summary &lt;- HR.Data %&gt;% \n  group_by(country.name.en) %&gt;% \n  mutate(Obs = n()) %&gt;% \n  filter(Obs==74) %&gt;% \n  summarise(Obs = mean(Obs), \n            Mean = mean(theta_mean, na.rm=TRUE), \n            SD = sd(theta_mean)\n            )\nHR.Summary %&gt;% mutate(Country = country.name.en) %&gt;%\n  select(-country.name.en) %&gt;% \n  relocate(Country, .before=Obs) %&gt;% \n  gt() %&gt;%\n  cols_label(SD = \"Std. Dev.\")\n\n\n\n\n\n\n\n\n\nCountry\nObs\nMean\nStd. Dev.\n\n\n\n\nAfghanistan\n74\n-0.808239676\n1.5835807\n\n\nAlbania\n74\n-0.733855668\n1.1318765\n\n\nArgentina\n74\n-0.109687027\n0.8659722\n\n\nAustralia\n74\n1.496089393\n0.4821145\n\n\nAustria\n74\n1.363463386\n0.7163969\n\n\nBelgium\n74\n1.950358681\n0.8702604\n\n\nBhutan\n74\n1.639800956\n0.8947993\n\n\nBolivia\n74\n0.031485088\n0.6004716\n\n\nBrazil\n74\n-0.986771401\n0.4380970\n\n\nBulgaria\n74\n-0.141004868\n0.8164432\n\n\nCanada\n74\n1.513579623\n1.0867982\n\n\nChile\n74\n-0.116312712\n1.0980581\n\n\nChina\n74\n-1.690418324\n0.5866867\n\n\nColombia\n74\n-1.549160011\n0.3371290\n\n\nCosta Rica\n74\n1.407450473\n0.5889534\n\n\nCuba\n74\n-0.780236659\n0.6767858\n\n\nCzechia\n74\n0.234391962\n1.7996961\n\n\nDenmark\n74\n2.408907458\n0.7988521\n\n\nDominican Republic\n74\n-0.353273333\n0.4778804\n\n\nEcuador\n74\n-0.065637090\n0.4093959\n\n\nEgypt\n74\n-0.953780511\n0.3387420\n\n\nEl Salvador\n74\n-0.456976650\n1.0261214\n\n\nEthiopia\n74\n-1.250759418\n0.9343362\n\n\nFinland\n74\n2.234185764\n0.9850571\n\n\nFrance\n74\n0.732780358\n0.7610454\n\n\nGreece\n74\n0.343929239\n0.6769572\n\n\nGuatemala\n74\n-1.243405610\n1.0571324\n\n\nHaiti\n74\n-0.700733551\n0.7827763\n\n\nHonduras\n74\n-0.004659247\n0.6012447\n\n\nHungary\n74\n0.316610321\n1.1781173\n\n\nIceland\n74\n4.448582351\n0.7721095\n\n\nIran\n74\n-1.490454238\n0.5933340\n\n\nIraq\n74\n-1.759200305\n0.6444676\n\n\nIreland\n74\n1.714516245\n0.8303707\n\n\nItaly\n74\n0.747846387\n0.5781654\n\n\nJapan\n74\n1.346933187\n0.8414272\n\n\nJordan\n74\n-0.167098074\n0.3324552\n\n\nLebanon\n74\n-0.501174232\n0.5096649\n\n\nLiberia\n74\n0.016102174\n0.9964066\n\n\nLuxembourg\n74\n4.610048247\n0.7513979\n\n\nMexico\n74\n-0.698399686\n0.4417479\n\n\nMongolia\n74\n1.979956542\n0.8973234\n\n\nNepal\n74\n-0.407058523\n0.7314475\n\n\nNetherlands\n74\n2.179110741\n1.6230486\n\n\nNew Zealand\n74\n3.388201387\n0.5058292\n\n\nNicaragua\n74\n-0.334761828\n0.8095413\n\n\nNorway\n74\n2.580217186\n1.2412017\n\n\nOman\n74\n1.083276811\n0.4880672\n\n\nPanama\n74\n0.534798448\n0.9244702\n\n\nParaguay\n74\n-0.431996166\n0.8683609\n\n\nPeru\n74\n-0.398071785\n0.8472583\n\n\nPhilippines\n74\n-1.442899788\n0.5619596\n\n\nPoland\n74\n0.228957535\n1.2563224\n\n\nPortugal\n74\n0.513038978\n1.4489625\n\n\nRomania\n74\n-0.552472696\n0.9883813\n\n\nRussia\n74\n-1.596063064\n0.3926173\n\n\nSaudi Arabia\n74\n-0.087345053\n0.4736322\n\n\nSouth Africa\n74\n-1.013630691\n0.5891013\n\n\nSpain\n74\n0.389802441\n0.7055324\n\n\nSweden\n74\n1.675085472\n1.0897249\n\n\nSwitzerland\n74\n1.177549367\n0.8326230\n\n\nSyria\n74\n-1.051481698\n0.6846712\n\n\nThailand\n74\n-0.511999725\n0.4080301\n\n\nTurkey\n74\n-0.890056818\n0.4962535\n\n\nUnited Kingdom\n74\n0.890858555\n0.8947926\n\n\nUnited States\n74\n0.232456052\n1.2330506\n\n\nUruguay\n74\n0.649137406\n1.4119239\n\n\nVenezuela\n74\n-0.585731862\n0.7032445"
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#improving-the-table",
    "href": "posts/HumanRightsTable/index.html#improving-the-table",
    "title": "Human Rights Protections–Tables",
    "section": "Improving the Table",
    "text": "Improving the Table\nI want to add some things to this. I want a spanning header for the three bits of actual human rights data that I am using. I also want a list column of the data to feed to the sparkline function to generate the time series plot. I found a file of flags on my hard drive that I got from somewhere and I want to deploy them in the table. I will also round the digits\n\n\nHow’s that done?\nlibrary(countrycode)\nFlags &lt;- read.csv(\"data/flags_iso.csv\")\nHR.Summary &lt;- HR.Data %&gt;% \n  group_by(country.name.en) %&gt;% \n  mutate(Obs = n()) %&gt;% \n  filter(Obs==74) %&gt;%\n  arrange(YEAR) %&gt;%\n  summarise(Obs = mean(Obs), \n            Mean = mean(theta_mean, na.rm=TRUE), \n            SD = sd(theta_mean), \n            hr_data = list(theta_mean),\n            .groups = \"drop\")\nCCs &lt;- codelist %&gt;% select(country.name.en, iso3c)\nHR.Summary &lt;- HR.Summary %&gt;% \n  left_join(., CCs) %&gt;%\n  left_join(., Flags, \n            by=c(\"iso3c\" = \"Alpha.3.code\")) %&gt;%\n  select(-iso3c, -Country, -Alpha.2.code) %&gt;%\n  relocate(., URL, .after=country.name.en)\nMy.Table &lt;- HR.Summary %&gt;%\n  gt() %&gt;%\n# format the numeric output to 3 digit rounding  \n  fmt_number(columns = c(Mean, SD),\n             decimals = 3) %&gt;%\n# create nice labels for a few ugly variable names\n  cols_label(country.name.en = \"Country\",\n             SD = \"Std. Dev.\",\n             hr_data = \"Time Series Plot\",\n             URL = \"Flag\") %&gt;%\n# Plot the sparklines from the list column\n  gt_plt_sparkline(hr_data, \n                   type=\"ref_median\", \n                   same_limit = TRUE\n                   ) %&gt;%\n# Plot the flags from the included URL's in the data\n  gt_img_rows(URL, img_source = \"web\", height = 30) %&gt;%\n# use the guardian's table theme\n  gt_theme_guardian() %&gt;% \n# give hulk coloring to the Mean Human Rights Score\n  gt_hulk_col_numeric(Mean) %&gt;%\n# create a header and subheader\n  tab_header(title=\"Human Rights Data Summary\", subtitle = \"Data from Fariss (2020)\") %&gt;%\n# create the spanner heading\n  tab_spanner(label = \"Human Rights Measures\",\n    columns = c(\n      Mean, SD, hr_data)\n    )\n# save the original as an image\ngtsave(My.Table, \"Table.png\")\n# show the table themed in accordance with the page\nMy.Table\n\n\n\n\n\n\nHuman Rights Data Summary\nData from Fariss (2020)\nCountry\nFlag\nObs\nHuman Rights Measures\nMean\nStd. Dev.\nTime Series Plot\nAfghanistan\n\n74\n−0.808\n1.584\n\nAlbania\n\n74\n−0.734\n1.132\n\nArgentina\n\n74\n−0.110\n0.866\n\nAustralia\n\n74\n1.496\n0.482\n\nAustria\n\n74\n1.363\n0.716\n\nBelgium\n\n74\n1.950\n0.870\n\nBhutan\n\n74\n1.640\n0.895\n\nBolivia\n\n74\n0.031\n0.600\n\nBrazil\n\n74\n−0.987\n0.438\n\nBulgaria\n\n74\n−0.141\n0.816\n\nCanada\n\n74\n1.514\n1.087\n\nChile\n\n74\n−0.116\n1.098\n\nChina\n\n74\n−1.690\n0.587\n\nColombia\n\n74\n−1.549\n0.337\n\nCosta Rica\n\n74\n1.407\n0.589\n\nCuba\n\n74\n−0.780\n0.677\n\nCzechia\n\n74\n0.234\n1.800\n\nDenmark\n\n74\n2.409\n0.799\n\nDominican Republic\n\n74\n−0.353\n0.478\n\nEcuador\n\n74\n−0.066\n0.409\n\nEgypt\n\n74\n−0.954\n0.339\n\nEl Salvador\n\n74\n−0.457\n1.026\n\nEthiopia\n\n74\n−1.251\n0.934\n\nFinland\n\n74\n2.234\n0.985\n\nFrance\n\n74\n0.733\n0.761\n\nGreece\n\n74\n0.344\n0.677\n\nGuatemala\n\n74\n−1.243\n1.057\n\nHaiti\n\n74\n−0.701\n0.783\n\nHonduras\n\n74\n−0.005\n0.601\n\nHungary\n\n74\n0.317\n1.178\n\nIceland\n\n74\n4.449\n0.772\n\nIran\n\n74\n−1.490\n0.593\n\nIraq\n\n74\n−1.759\n0.644\n\nIreland\n\n74\n1.715\n0.830\n\nItaly\n\n74\n0.748\n0.578\n\nJapan\n\n74\n1.347\n0.841\n\nJordan\n\n74\n−0.167\n0.332\n\nLebanon\n\n74\n−0.501\n0.510\n\nLiberia\n\n74\n0.016\n0.996\n\nLuxembourg\n\n74\n4.610\n0.751\n\nMexico\n\n74\n−0.698\n0.442\n\nMongolia\n\n74\n1.980\n0.897\n\nNepal\n\n74\n−0.407\n0.731\n\nNetherlands\n\n74\n2.179\n1.623\n\nNew Zealand\n\n74\n3.388\n0.506\n\nNicaragua\n\n74\n−0.335\n0.810\n\nNorway\n\n74\n2.580\n1.241\n\nOman\n\n74\n1.083\n0.488\n\nPanama\n\n74\n0.535\n0.924\n\nParaguay\n\n74\n−0.432\n0.868\n\nPeru\n\n74\n−0.398\n0.847\n\nPhilippines\n\n74\n−1.443\n0.562\n\nPoland\n\n74\n0.229\n1.256\n\nPortugal\n\n74\n0.513\n1.449\n\nRomania\n\n74\n−0.552\n0.988\n\nRussia\n\n74\n−1.596\n0.393\n\nSaudi Arabia\n\n74\n−0.087\n0.474\n\nSouth Africa\n\n74\n−1.014\n0.589\n\nSpain\n\n74\n0.390\n0.706\n\nSweden\n\n74\n1.675\n1.090\n\nSwitzerland\n\n74\n1.178\n0.833\n\nSyria\n\n74\n−1.051\n0.685\n\nThailand\n\n74\n−0.512\n0.408\n\nTurkey\n\n74\n−0.890\n0.496\n\nUnited Kingdom\n\n74\n0.891\n0.895\n\nUnited States\n\n74\n0.232\n1.233\n\nUruguay\n\n74\n0.649\n1.412\n\nVenezuela\n\n74\n−0.586\n0.703\n\n\n\n\n\n\n\n\nImage of Table"
  },
  {
    "objectID": "posts/A Data Visualization/index.html#not-long-ago-i-learned",
    "href": "posts/A Data Visualization/index.html#not-long-ago-i-learned",
    "title": "geoFacets of Credit Quality",
    "section": "Not Long Ago I Learned",
    "text": "Not Long Ago I Learned\nOne thing that I quite liked about RMarkdown was column figures in the Tufte document templates. Those features are native to quarto, to a large extent. All we need do is add the following bit to code chunks.\n#| column: margin\n\n\nCode\nPlot1\n\n\n\n\n\n\nFigure 1: Credit quality in US States\n\n\n\nSame with tables.\n\n\nCode\nknitr::kable(\n  Res1[1:3, 1:3]\n)\n\n\n\n\n\n\nstate_name\nyear\nCredit.Quality\n\n\n\n\nAlabama\n1994\n-0.3564650\n\n\nAlabama\n1995\n-0.3576466\n\n\nAlabama\n1996\n-0.3559865"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html",
    "href": "posts/InteractiveVisualization/index.html",
    "title": "Interactive Visualizations",
    "section": "",
    "text": "Last updated: 2023-03-17 12:23:04\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#the-plotly-package",
    "href": "posts/InteractiveVisualization/index.html#the-plotly-package",
    "title": "Interactive Visualizations",
    "section": "The plotly package",
    "text": "The plotly package\nplotly as a package has far more it can do.\n\n\nHow’s that done?\nlibrary(plotly); library(magrittr)\nlibrary(tidyquant)\n# Use tidyquant to get the data\nINTC &lt;- tq_get(\"INTC\")\n# Slice off the most recent 90 days\nINTC.tail.90 &lt;- tail(INTC, 90)\nINTC.tail &lt;- INTC.tail.90\n# Create a counter of days\nINTC.tail$ID &lt;- seq.int(nrow(INTC.tail))\n# Round the prices to 2 digits\nINTC.tail %&lt;&gt;% mutate(close = round(close, digits=2))\n\n\nNow we want a function to create the dataset for each stage of the animation. There are a few ways to do this but most involve writing a function to create them. This example function comes from the plotly documents.\n\n\nHow’s that done?\n# This is in the example for plotly paths\n# First a supporting function: getLevels takes input x\ngetLevels &lt;- function (x) {\n  # if x is a factor\n    if (is.factor(x)) \n  # grab the levels of x\n        levels(x)\n  # if x is not a factor, sort unique values of x\n    else sort(unique(x))\n}\n# Two inputs, the data and the variable to form the splits along the x-axis\naccumulate_by &lt;- function(dat, var) {\n  # This handles linking variables to their environment\n  var &lt;- lazyeval::f_eval(var, dat)\n  # get the levels of the given variable using the function above\n  lvls &lt;- getLevels(var)\n  # use lapply, tidy would use map to iterate over the levels in `lvls` and column bind the data with frame denotes by lvls[[x]]\n  dats &lt;- lapply(seq_along(lvls), function(x) {\n   cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\n  })\n  # bind the rows together\n  dplyr::bind_rows(dats)\n}\n# Invoke the function on our ID variable\nINTC.tail &lt;- INTC.tail %&gt;% accumulate_by(~ID)\n# Create a figure of ID and close for each frame value using plotly's version of a line plot: type:scatter-mode:lines\n# The rest is standard plotly\nfig &lt;- INTC.tail %&gt;% plot_ly(\n  x = ~ID, \n  y = ~close, \n  frame = ~frame,\n  type = 'scatter', \n  mode = 'lines', \n  # This is short for fill to zero on the y-axis\n  fill = 'tozeroy',\n  fillcolor='rgba(73, 26, 201, 0.5)',\n  line = list(color = 'rgb(73, 26, 201)'),\n  text = ~paste(\"Date: \", date, \"&lt;br&gt;Close: $\", close), \n  hoverinfo = 'text'\n)\n# Add the layout; one title and two axes\n# I also mess with the margin to keep the figure from being cut off.\nfig &lt;- fig %&gt;% layout(\n  title =\"Intel Stock Closing Price: Last 90 Days\",\n  yaxis = list(\n    title = \"Close\", \n    range = c(0,50), \n    zeroline = F,\n    tickprefix = \"$\"\n  ),\n  xaxis = list(\n    title = \"Day\", \n    range = c(0,90), \n    zeroline = F, \n    showgrid = F\n  ),\n  margin = list(t=120) # adjust the plot margin to avoid cutting off letters\n) \n# Animate the figure with 100 frames\nfig &lt;- fig %&gt;% animation_opts(\n  frame = 100, # transition time 100 ms\n  transition = 0, # duration of smooth transition in ms\n  redraw = FALSE # redraw the plot at each transition?\n)\nfig &lt;- fig %&gt;% animation_slider(\n  currentvalue = list(\n    prefix = \"Day \"\n  )\n)\nfig\n\n\n\n\n\n\n\nAn easier plotly for these data because they are OHLC\nA link to a stand-alone document with all the data.\n\n\nHow’s that done?\n# basic example of ohlc charts\n# custom colors\ni &lt;- list(line = list(color = '#000000')) # black\nd &lt;- list(line = list(color = '#FF0000')) # red\n# Create the figure\nfig.2 &lt;- INTC.tail.90 %&gt;%\n  plot_ly(x = ~date, type=\"ohlc\",\n          open = ~open, close = ~close,\n          high = ~high, low = ~low,\n          increasing = i, decreasing = d)\nfig.2"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#corbyn-was-a-facebook-engagement-machine",
    "href": "posts/InteractiveVisualization/index.html#corbyn-was-a-facebook-engagement-machine",
    "title": "Interactive Visualizations",
    "section": "Corbyn was a Facebook Engagement Machine",
    "text": "Corbyn was a Facebook Engagement Machine\nThe data are a small table.\n\n\nHow’s that done?\nlibrary(ggrepel)\nlibrary(tidyverse) # call the tidyverse for %&gt;% and ggplot\nlibrary(ggthemes) # Use the economist theme\nlibrary(ggiraph)\nlibrary(DT)\ncorbyn &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-16/corbyn.csv\")\ndatatable(corbyn)\n\n\n\n\n\n\n\n\nggiraph of barplot and lollipop chart\nI want to plot this in a barplot that is linked with a lollipop chart.\n\n\nHow’s that done?\np1.Int &lt;- ggplot(corbyn, aes(x=reorder(political_group,avg_facebook_likes), data_id=political_group, y=avg_facebook_likes, label=avg_facebook_likes, tooltip = paste0(political_group,\"&lt;br&gt;\",avg_facebook_likes, sep=\"\"))) + \n  geom_bar_interactive(stat=\"identity\", fill=\"#DC241f\") + \n  geom_label(fill=\"#DC241f\", color=\"#FFFFFF\", size=3.5) +\n  labs(x=\"Associate of the Labour Party\", y=\"Average Facebook Likes\") +\n  hrbrthemes::theme_ipsum_rc() +\n  coord_flip()\np2.Int &lt;- ggplot(corbyn, aes(x=reorder(political_group,avg_facebook_likes), y=avg_facebook_likes, label=avg_facebook_likes, data_id=political_group, tooltip = paste0(political_group,\"&lt;br&gt;\",avg_facebook_likes, sep=\"\"))) + \n  geom_segment_interactive(aes(yend=0, xend=political_group), size=2, color=\"#DC241f\") + \n  geom_point(size=10, color=\"#DC241f\", alpha=0.8) +\n  geom_text(color=\"#FFFFFF\", size=3.5, fontface=2) +\n  labs(x=\"Associate of the Labour Party\", y=\"Average Facebook Likes\") +\n  hrbrthemes::theme_ipsum_rc() +\n  coord_flip()\nlibrary(patchwork)\nGIp1 &lt;- p1.Int / p2.Int\ngirafe(ggobj=GIp1)"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#women-in-science",
    "href": "posts/InteractiveVisualization/index.html#women-in-science",
    "title": "Interactive Visualizations",
    "section": "Women in Science",
    "text": "Women in Science\nI had a simple example for last week. Now I want to make it nicer. The data are essentially a table. Let me show it using pivot_wider.\n\n\nHow’s that done?\nwomen_research &lt;- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-16/women_research.csv\")\nwomen_research\n\n\n# A tibble: 60 × 3\n   country        field           percent_women\n   &lt;chr&gt;          &lt;chr&gt;                   &lt;dbl&gt;\n 1 Japan          Health sciences          0.24\n 2 Chile          Health sciences          0.43\n 3 United Kingdom Health sciences          0.45\n 4 United States  Health sciences          0.46\n 5 Mexico         Health sciences          0.46\n 6 Denmark        Health sciences          0.47\n 7 EU28           Health sciences          0.48\n 8 France         Health sciences          0.48\n 9 Canada         Health sciences          0.49\n10 Australia      Health sciences          0.5 \n# … with 50 more rows\n\n\nHow’s that done?\n# There's a spelling error I want to fix, select the rows and columns to fix and reassign the value\nwomen_research[women_research$field==\"Women inventores\",\"field\"] &lt;- \"Women Inventors\" \n# The label for CS/Maths is too long, also\nwomen_research[women_research$field==\"Computer science, maths\",\"field\"] &lt;- \"CS/Math\" \n# Make it wider\nWIR.Wide &lt;- women_research %&gt;% pivot_wider(., id_cols=country, names_from=field, values_from=percent_women)\n# A datatable\ndatatable(WIR.Wide)\n\n\n\n\n\n\n\n\nAn Interactive plot of Women in Research\n\n\nHow’s that done?\nlibrary(ggiraph)\nwomen_research &lt;- women_research %&gt;% group_by(country) %&gt;% mutate(Avg.Women.Percent = mean(percent_women)) %&gt;% ungroup()\nwomen_research$PercentWomen &lt;- as.character(round(women_research$percent_women, 3))\np1 &lt;- ggplot(women_research) +\n aes(x = reorder(country,Avg.Women.Percent), fill = country, weight = percent_women, tooltip = PercentWomen, data_id = country) +\n geom_bar_interactive() +\n scale_fill_viridis_d(option = \"cividis\") +\n guides(fill=FALSE) +\n coord_flip() +\n theme_minimal() + \n  theme(axis.text.y = element_text(angle = 45, hjust = 1, size=6)) +\n  labs(y = \"Percent of Publications/Patents\", x = \"Country/Group\", fill=\"Country/Grouping\", title = \"Publication and Invention by Women Around the World\", subtitle = \"Percent of Publications or Patents by Women\", caption = \"source: Economist Visualization Errors\") +\n facet_wrap(~field)\nlibrary(patchwork)\nggp1.changed &lt;- ggplot(women_research) +\n aes(x = field, y = country, fill = percent_women, , data_id = country, tooltip=percent_women) +\n geom_tile_interactive(size = 1L) +\n scale_fill_viridis_c(option=\"cividis\") +\n labs(x = \"Field or Occupation\", y = \"Country\", fill = \"% Women\") +\n theme_minimal(base_size = 10)\nggp1.changed &lt;- ggp1.changed + theme(plot.background = element_rect(colour = \"whitesmoke\"))\ncomb1 &lt;- p1 / ggp1.changed\ngirafe(code = print(comb1))"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#a-brief-crosstalk",
    "href": "posts/InteractiveVisualization/index.html#a-brief-crosstalk",
    "title": "Interactive Visualizations",
    "section": "A Brief Crosstalk",
    "text": "A Brief Crosstalk\nGetting this to work wasn’t hard. Getting it to style properly in interaction with the bootstrap frame was a pain. I finally just went with a blank column in two places to make sure that names don’t get cut off.\n\n\nHow’s that done?\nlibrary(htmltools)\nlibrary(crosstalk)\nlibrary(DT)\nlibrary(d3scatter)\n# Load the data\nBonds &lt;- read.csv(url(\"https://github.com/robertwwalker/DADMStuff/raw/master/BondFunds.csv\"), row.names=1)\n# Turn characters into factors\nBonds &lt;- Bonds %&gt;% mutate(Fees = as.factor(Fees), Risk = as.factor(Risk), Type = as.factor(Type))\n# Create shared data object\nshared_bonds &lt;- SharedData$new(Bonds)\n# Generate the bootsrap columns as three rows, page is 12 wide\nbscols(widths=c(12,12,12),\n  # A d3 visualization\n  d3scatter(shared_bonds, ~Expense.Ratio, ~Return.2009, ~Risk),\n  # The filter checkboxes\n  list(filter_checkbox(\"Fees\", \"Fees\", shared_bonds, ~Fees, inline=TRUE),\n       filter_checkbox(\"Type\", \"Type\", shared_bonds, ~Type, inline=TRUE),\n       filter_checkbox(\"Fees\", \"Risk\", shared_bonds, ~Risk, inline=TRUE)),\n  # The datatable\n  datatable(shared_bonds))\n\n\n\n\n\n\n\n\n\n\n\nFees\n\n\n\nNo\n\n\n\nYes\n\n\n\n\n\nType\n\n\n\nIntermediate Government\n\n\n\nShort Term Corporate\n\n\n\n\n\nRisk\n\n\n\nAbove average\n\n\n\nAverage\n\n\n\nBelow average\n\n\n\n\n\n\n\n\n\n\n\n\n\nWithout the bootstrap formatting of the webpage, it works much better.\n\n\n\nimage\n\n\n\nThe Fix for the cutoff parts\nThe trick to getting this to display properly was a blank column with width=1.\n\n\nHow’s that done?\nshared_bonds2 &lt;- SharedData$new(Bonds)\n# This was adjusted from above\nbscols(widths=c(12,1,11,1,11),\n  d3scatter(shared_bonds2, ~Expense.Ratio, ~Return.2009, ~Risk),\n  \"\",  # First blank column\n  list(filter_checkbox(\"Fees\", \"Fees\", shared_bonds2, ~Fees, inline=TRUE),\n       filter_checkbox(\"Type\", \"Type\", shared_bonds2, ~Type, inline=TRUE),\n       filter_checkbox(\"Fees\", \"Risk\", shared_bonds2, ~Risk, inline=TRUE)),\n  \"\", # Second blank column\n  datatable(shared_bonds2))\n\n\n\n\n\n\n\n\n\n\n\n\nFees\n\n\n\nNo\n\n\n\nYes\n\n\n\n\n\nType\n\n\n\nIntermediate Government\n\n\n\nShort Term Corporate\n\n\n\n\n\nRisk\n\n\n\nAbove average\n\n\n\nAverage\n\n\n\nBelow average"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nA link to obert’s academic website\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Dissent in the Trump 14th Amendment Case?\n\n\n\n\n\n\nRobert W. Walker\n\n\nMar 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConnecting RStudio and Github\n\n\n\n\n\n\nRobert W. Walker\n\n\nNov 12, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshinylive\n\n\n\n\n\n\n\n\n\nOct 27, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUpdating R and R Packages\n\n\n\n\n\n\n\n\n\nOct 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA Shiny on Corruption Data\n\n\n\n\n\n\nRobert W. Walker\n\n\nMar 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocker and Shiny\n\n\n\n\n\n\nRobert W. Walker\n\n\nMar 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameterizing Markdown\n\n\n\n\n\n\nRobert W. Walker\n\n\nFeb 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive Visualizations\n\n\n\n\n\n\nRobert W. Walker\n\n\nFeb 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHuman Rights Protections–Tables\n\n\n\n\n\n\n\n\n\n\nFeb 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPigeons and Palettes\n\n\n\n\n\n\n\n\n\nJan 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeoFacets of Credit Quality\n\n\n\n\n\n\n\n\n\nJan 2, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "slides/slides-CMF.html",
    "href": "slides/slides-CMF.html",
    "title": "Models of Choice and Forecasting Slides",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nSlides\n\nModels of Choice and Forecasting Slides"
  },
  {
    "objectID": "slides/slides-CWD.html",
    "href": "slides/slides-CWD.html",
    "title": "Slides: Communicating with Data",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\nSlides for Communicating with Data"
  },
  {
    "objectID": "slides/slides-Essex.html",
    "href": "slides/slides-Essex.html",
    "title": "Panel Data Slides",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nSlides\n\nPanel Data Slides"
  },
  {
    "objectID": "slides/slides-DADM.html",
    "href": "slides/slides-DADM.html",
    "title": "Slides: Data Analysis, Modelling, and Decision-Making",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\nSlides for DADM 622/5103"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nRobert W. Walker, Ph. D.\n\n\n\n\n\nRobert W. Walker is an Associate Professor of Quantitative Methods in the Atkinson Graduate School of Management at Willamette University\nHe earned a Ph. D. in political science from the University of Rochester in 2005 and has previously held teaching positions at Dartmouth College, Rice University, Texas A&M University, and Washington University in Saint Louis. His current research develops and applies semi-Markov processes to time-series, cross-section data in international relations and international/comparative political economy. He teaches courses in quantitative methods/applied statistics and microeconomic strategy and previously taught four iterations in the U. S. National Science Foundation funded Empirical Implications of Theoretical Models sequence at Washington University in Saint Louis. His work with Curt Signorino and Muhammet Bas was awarded the Miller Prize for the best article in Political Analysis in 2009.\nHis web presence is rww.science and his github is https://github.com/robertwwalker. He is on sabbatical leave for the 2023-24 academic year.\n\n\nRobert’s Erdos-Bacon Number is 8.\n\n\n\n\n\nErdos Table\n\n\n\n\n\n\n\nBacon Table"
  },
  {
    "objectID": "courses/courses-CWD.html#communicating-with-data",
    "href": "courses/courses-CWD.html#communicating-with-data",
    "title": "Courses: Communicating With Data",
    "section": "Communicating With Data",
    "text": "Communicating With Data\nCommunicating with Data is a cross-listed course in the graduate school of Management and the Data Science program. In the course, we explore communication tools, e.g. tables and interactive tables, figures and interactive figures, shiny apps, websites, parameterized markdown, and, quite generically, the provision of tools for end users of data science tooling for insights.\n\nThere is a course website.\n\n\n\n\nThe slides for Spring 2023"
  },
  {
    "objectID": "courses/courses-Essex.html#panel-data-at-essex",
    "href": "courses/courses-Essex.html#panel-data-at-essex",
    "title": "Courses: Panel Data at Essex",
    "section": "Panel Data at Essex",
    "text": "Panel Data at Essex\n\nThere is a course website."
  },
  {
    "objectID": "courses/courses-DADM.html",
    "href": "courses/courses-DADM.html",
    "title": "Courses: Data Analysis, Modeling, and Decision-Making",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\nDADM 622/5103 is the core/required statistics and data course in the Atkinson Graduate School of Management. While most of the materials are available via the learning management system, I am increasingly migrating to something I have more control over because learning management systems change.\n\nThere is a set of occasionally and frequently asked questions for this course.\n\n\n\n\nThe slides for Spring 2023"
  },
  {
    "objectID": "courses/courses-CAF.html#models-of-choice-and-forecasting",
    "href": "courses/courses-CAF.html#models-of-choice-and-forecasting",
    "title": "Courses: Choice and Forecasting",
    "section": "Models of Choice and Forecasting",
    "text": "Models of Choice and Forecasting\n\nThere is a website for the course."
  },
  {
    "objectID": "links.html#data",
    "href": "links.html#data",
    "title": "Links",
    "section": "Data",
    "text": "Data\n\nOur World in Data\nKaggle\n#tidyTuesday\nThough dated, an amazing resource from kdnuggets\nHarvard Dataverse\nWorld Bank Open Data\nWorld Health Organization Open Data\nGoogle public data explorer\nRegistry of Open Data on AWS\nfivethirtyeight\nThe US Census Bureau\ndata.gov\ndbpedia\ninside airbnb\nyelp open data\nUNICEF data"
  },
  {
    "objectID": "links.html#r-for-data-science",
    "href": "links.html#r-for-data-science",
    "title": "Links",
    "section": "R for Data Science",
    "text": "R for Data Science\nFrom the front page of the second edition website.\n\n\n\n\n\n\nTip\n\n\n\nThis book will teach you how to do data science with R: You’ll learn how to get your data into R, get it into the most useful structure, transform it and visualize.\n\n\n R for Data Science (1st Edition)\n R for Data Science (2nd Edition)\n #r4ds"
  },
  {
    "objectID": "links.html#twitter",
    "href": "links.html#twitter",
    "title": "Links",
    "section": "Twitter",
    "text": "Twitter\nThe #rstats hashtag is the best place to start on Twitter.\n #rstats"
  },
  {
    "objectID": "links.html#mastodon",
    "href": "links.html#mastodon",
    "title": "Links",
    "section": "Mastodon",
    "text": "Mastodon\nR users are also on Mastodon, an open-source social network that is becoming increasingly popular.1 The #rstats tag is most active on fosstodon.\n fosstodon\n mastodon.social\n #rstats"
  },
  {
    "objectID": "links.html#data-science-by-design",
    "href": "links.html#data-science-by-design",
    "title": "Links",
    "section": "Data Science by Design",
    "text": "Data Science by Design\n(h/t) Ella Kaye for informing me of this.\nIn her words,\n\n\n\n\n\n\nNote\n\n\n\nData Science by Design (DSxD) celebrates creativity in data science and developing a more open, ethical, and inclusive future for data work. They run small conferences and an active slack group. They publish anthologies, both in print and online, collections of work by data designers, scientists, and artists, with each issue on a different theme.\nLink: The site I borrowed the description from.\n\n\n website\n Twitter\n book"
  },
  {
    "objectID": "links.html#footnotes",
    "href": "links.html#footnotes",
    "title": "Links",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDanielle Navarro has an excellent guide for data science folks trying to navigate the fediverse.↩︎"
  },
  {
    "objectID": "posts/UpdatingR/index.html#what-packages-have-i-installed",
    "href": "posts/UpdatingR/index.html#what-packages-have-i-installed",
    "title": "Updating R and R Packages",
    "section": "1. What packages have I installed?",
    "text": "1. What packages have I installed?\nI will define an R object I1 [a data.frame with a single character variable InstPack]\n\n\nCode\nI1 &lt;- data.frame(InstPack = installed.packages()[,1])"
  },
  {
    "objectID": "posts/UpdatingR/index.html#save-that-set-of-packages",
    "href": "posts/UpdatingR/index.html#save-that-set-of-packages",
    "title": "Updating R and R Packages",
    "section": "2. Save that set of packages",
    "text": "2. Save that set of packages\nFrom here, I need to save this in an accessible location.\nsave(I1, file=\"InstalledPackagesNov2023.RData\")"
  },
  {
    "objectID": "posts/UpdatingR/index.html#go-to-cran-and-update-r",
    "href": "posts/UpdatingR/index.html#go-to-cran-and-update-r",
    "title": "Updating R and R Packages",
    "section": "3. Go to CRAN and update R",
    "text": "3. Go to CRAN and update R\nGo to CRAN and follow the relevant choices to the required option. Download the file and install it."
  },
  {
    "objectID": "posts/UpdatingR/index.html#start-the-new-r",
    "href": "posts/UpdatingR/index.html#start-the-new-r",
    "title": "Updating R and R Packages",
    "section": "4. Start the new R",
    "text": "4. Start the new R\nClick on it. Or open RStudio."
  },
  {
    "objectID": "posts/UpdatingR/index.html#load-the-set-of-installed-packages",
    "href": "posts/UpdatingR/index.html#load-the-set-of-installed-packages",
    "title": "Updating R and R Packages",
    "section": "5. Load the set of installed packages",
    "text": "5. Load the set of installed packages\nload(\"InstalledPackagesNov2023.RData\")"
  },
  {
    "objectID": "posts/UpdatingR/index.html#install-the-set-of-packages",
    "href": "posts/UpdatingR/index.html#install-the-set-of-packages",
    "title": "Updating R and R Packages",
    "section": "6. Install the set of packages",
    "text": "6. Install the set of packages\nthe purrr::walkfunction is very handy.\ninstall.packages(\"purrr\")\npurrr::walk(I1$InstPack, ~install.packages(.x))\nThis will take a while as R attempts to go through and, one by one, install them.\nOnce this is complete, I need two more things."
  },
  {
    "objectID": "posts/UpdatingR/index.html#an-anti-join",
    "href": "posts/UpdatingR/index.html#an-anti-join",
    "title": "Updating R and R Packages",
    "section": "8. An anti-join",
    "text": "8. An anti-join\ndplyr has an anti-join function that is one of a few ways to find the packages that did not install.\nremainder &lt;- dplyr::anti_join(I1, I2)\nremainder\n\n\n\nFailed Installs\n\n\nNow I know what to go searching for on github because that is where the missing packages come from."
  },
  {
    "objectID": "posts/UpdatingR/index.html#the-set-of-installed-packages",
    "href": "posts/UpdatingR/index.html#the-set-of-installed-packages",
    "title": "Updating R and R Packages",
    "section": "7. The set of installed packages",
    "text": "7. The set of installed packages\nIn this case, let me create the set of installed packages on this new installation in I2.\nI2 &lt;- data.frame(InstPack = installed.packages()[,1])"
  },
  {
    "objectID": "posts/UpdatingR/index.html#a-postscript",
    "href": "posts/UpdatingR/index.html#a-postscript",
    "title": "Updating R and R Packages",
    "section": "9. A postscript",
    "text": "9. A postscript\nNow I can get smart about this part also. In the process of searching for these, it became useful to go ahead and create an amendable collection of locations for these. For example, d3scatter.\n\n\n\nd3scatter\n\n\nremainder[\"d3scatter\",\"loc\"] &lt;- \"jcheng5/d3scatter\"\nThis is painstaking; past me was unkind to present me in not doing this before. But as long as I save it, or the code in this blog post, then I can recover it all.\nAfter filling in the loc column in remainder, I can walk it with walk(remainder$loc, ~devtools::install_github(.x)).\nremainder[\"dsbox\",\"loc\"] &lt;- \"tidyverse/dsbox\"\nremainder[\"distilltools\",\"loc\"] &lt;- \"EllaKaye/distilltools\"\nremainder[\"emo\",\"loc\"] &lt;- \"hadley/emo\"\nremainder[\"emoGG\",\"loc\"] &lt;- \"dill/emoGG\"\nremainder[\"equatiomatic\",\"loc\"] &lt;- \"datalorax/equatiomatic\"\nremainder[\"flexpivot\",\"loc\"] &lt;- \"dreamRs/flexpivot\"\nremainder[\"frailtypack\",\"loc\"] &lt;- \"socale/frailtypack\"\nremainder[\"ggflags\",\"loc\"] &lt;- \"jimjam-slam/ggflags\"\nremainder[\"gradethis\",\"loc\"] &lt;- \"rstudio/gradethis\"\nremainder[\"LogisticDx\",\"loc\"] &lt;- \"dardisco/LogisticDx\"\nremainder[\"maptools\",\"loc\"] &lt;- \"\"\nremainder[\"ResampleProps\",\"loc\"] &lt;- \"robertwwalker/ResampleProps\"\nremainder[\"rgeos\",\"loc\"] &lt;- \"\"\nremainder[\"rgdal\",\"loc\"] &lt;- \"\"\nremainder[\"sankeytreeR\",\"loc\"] &lt;- \"timelyportfolio/sankeytree\""
  },
  {
    "objectID": "posts/Rstudio-Github/index.html",
    "href": "posts/Rstudio-Github/index.html",
    "title": "Connecting RStudio and Github",
    "section": "",
    "text": "Last updated: 2023-11-17 12:10:57.394047\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/Rstudio-Github/index.html#connecting-rstudio-and-github",
    "href": "posts/Rstudio-Github/index.html#connecting-rstudio-and-github",
    "title": "Connecting RStudio and Github",
    "section": "Connecting RStudio and Github",
    "text": "Connecting RStudio and Github\nThere are a number of useful references for doing this. I merely document this here for my own reference as the process of updating OS’s and moving drives has necessitated that I do this a few times over the last few days. Here are the steps.\nThe key thing is a personal access token (PAT). You can use keys and such, though this way is the easiest. We will generate the PAT via Github and then make the system aware of it. Here is the process; the first step can be done in either of two ways. Before starting, there are two packages we may need. We also need to have git installed and RStudio needs to know our Github account in the abstract.\n# install the necessary packages\ninstall.packages(c(\"usethis\",\"credentials\"))\n# Let our R session know about our github account\nusethis::use_git_config(user.name = \"YourName\", user.email = \"your@mail.com\")\n\nGenerate the PAT using\n\neither usethis::create_github_token()\nor on the Github website, Settings &gt; Developer Settings &gt; Personal Access Tokens and clicking Generate new token\n\n\n\nIn either case, this will create a token that can allow RStudio and Github to communicate. In either case, a collection of letters and numbers will emerge and it should be copied to the clipboard.\n\nWe now need to make RStudio aware of the token.\n\ncredentials::set_github_pat(\"YourPAT\")\nTo make future R sessions aware of the token, we need to make it a part of our environment.\nusethis::edit_r_environ()\nwill need a line [without quotes or whatever]\nGITHUB_PAT=YourPAT\nNext time R starts, this linkage to Github is known. Or should be.\n\n\nCode\nknitr::write_bib(names(sessionInfo()$otherPkgs), file=\"bibliography.bib\")"
  },
  {
    "objectID": "posts/shinylive/index.html#tldr",
    "href": "posts/shinylive/index.html#tldr",
    "title": "shinylive",
    "section": "tldr;",
    "text": "tldr;\nTake an app and try to build it into shinylive. It works."
  },
  {
    "objectID": "posts/shinylive/index.html#what-is-involved",
    "href": "posts/shinylive/index.html#what-is-involved",
    "title": "shinylive",
    "section": "What is involved?",
    "text": "What is involved?\nHere is my app. I do not know where it originally came from – the data that is – but it is very simple.\n# Forecasting Google ----\n# It supports 3 stats forecasting models - Linear Regression, ARIMA, and Holt-Winters\n\nlibrary(shiny)\nGOOG &lt;- [data downloaded via tq_get in tidyquant and turned into a daily ts object, check the repo for the actual data]\n# UI ----\nui &lt;- fluidPage(\n  \n  # App title ----\n  titlePanel(\"Forecasting Sandbox\"),\n  sidebarLayout(\n    \n    sidebarPanel(width = 3,\n                 selectInput(inputId = \"model\",\n                             label = \"Select Model\",\n                             choices = c(\"Linear Regression\", \"ARIMA\", \"Holt-Winters\"),\n                             selected = \"Linear Regression\"),\n                 # Linear Regression model arguments\n                 conditionalPanel(condition = \"input.model == 'Linear Regression'\",\n                                  checkboxGroupInput(inputId = \"lm_args\", \n                                                     label = \"Select Regression Features:\", \n                                                     choices = list(\"Trend\" = 1, \n                                                                    \"Seasonality\" = 2),\n                                                     selected = 1)),\n                 # ARIMA model arguments\n                 conditionalPanel(condition = \"input.model == 'ARIMA'\",\n                                  h5(\"Order Parameters\"),\n                                  sliderInput(inputId = \"p\",\n                                              label = \"p:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"d\",\n                                              label = \"d:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"q\",\n                                              label = \"q:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  h5(\"Seasonal Parameters:\"),\n                                  sliderInput(inputId = \"P\",\n                                              label = \"P:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"D\",\n                                              label = \"D:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"Q\",\n                                              label = \"Q:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0)\n                 ),\n                 # Holt Winters model arguments\n                 conditionalPanel(condition = \"input.model == 'Holt-Winters'\",\n                                  checkboxGroupInput(inputId = \"hw_args\", \n                                                     label = \"Select Holt-Winters Parameters:\", \n                                                     choices = list(\"Beta\" = 2, \n                                                                    \"Gamma\" = 3),\n                                                     selected = c(1, 2, 3)),\n                                  selectInput(inputId = \"hw_seasonal\",\n                                              label = \"Select Seasonal Type:\",\n                                              choices = c(\"Additive\", \"Multiplicative\"),\n                                              selected = \"Additive\")),\n                 \n                 checkboxInput(inputId = \"log\", \n                               label = \"Log Transformation\",\n                               value = FALSE),\n                 sliderInput(inputId = \"h\",\n                             label = \"Forecasting Horizon:\",\n                             min = 1,\n                             max = 60,\n                             value = 24)\n                 #   actionButton(inputId = \"update\",\n                 #                 label = \"Update!\")\n                 \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(width = 9,\n              # Forecast Plot ----\n              plotOutput(outputId = \"fc_plot\",\n                         height = \"400px\")\n              \n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver &lt;- function(input, output) {\n  # Load the dataset a reactive object\n  d &lt;- reactiveValues(df = data.frame(input = as.numeric(GOOG), \n                                      index = seq.Date(from= as.Date(\"2016-05-19\"),\n                                                       by = \"day\",\n                                                       length.out = length(GOOG))),\n                      air = GOOG)\n  \n  # Log transformation \n  observeEvent(input$log,{\n    if(input$log){\n      d$df &lt;- data.frame(input = log(as.numeric(GOOG)), \n                         index = seq.Date(from = as.Date(\"2016-05-19\"),\n                                          by = \"day\",\n                                          length.out = length(GOOG)))\n      \n      d$air &lt;- log(GOOG)\n    } else {\n      d$df &lt;- data.frame(input = as.numeric(GOOG), \n                         index = seq.Date(from = as.Date(\"2016-05-19\"),\n                                          by = \"day\",\n                                          length.out = length(GOOG)))\n      \n      d$air &lt;- GOOG\n    }\n  })\n  \n  # The forecasting models execute under the plot render\n  output$fc_plot &lt;- renderPlot({\n    \n    # if adding a prediction intervals level argument set over here\n    pi &lt;- 0.95\n    \n    # Holt-Winters model\n    if(input$model == \"Holt-Winters\"){\n      a &lt;- b &lt;- c &lt;- NULL\n      \n      if(!\"2\" %in% input$hw_args){\n        b &lt;- FALSE\n      }\n      \n      if(!\"3\" %in% input$hw_args){\n        c &lt;- FALSE\n      }\n      \n      md &lt;- HoltWinters(d$air, \n                        seasonal = ifelse(input$hw_seasonal == \"Additive\", \"additive\", \"multiplicative\"),\n                        beta = b,\n                        gamma = c\n      )\n      fc &lt;- predict(md, n.ahead = input$h, prediction.interval = TRUE) |&gt;\n        as.data.frame()\n      fc$index &lt;- seq.Date(from = as.Date(Sys.Date()),\n                           by = \"day\",\n                           length.out = input$h)\n      # ARIMA model\n    } else if(input$model == \"ARIMA\"){\n      \n      md &lt;- arima(d$air,\n                  order = c(input$p, input$d, input$q),\n                  seasonal = list(order = c(input$P, input$D, input$Q))\n      )\n      fc &lt;- predict(md, n.ahead = input$h, prediction.interval = TRUE) |&gt;\n        as.data.frame() \n      names(fc) &lt;- c(\"fit\", \"se\")\n      \n      fc$index &lt;- seq.Date(from = as.Date(Sys.Date()),\n                           by = \"day\",\n                           length.out = input$h)\n      \n      fc$upr &lt;- fc$fit + 1.96 * fc$se\n      fc$lwr &lt;- fc$fit - 1.96 * fc$se\n      # Linear Regression model\n    } else if(input$model == \"Linear Regression\"){\n      \n      d_lm &lt;- d$df\n      \n      d_fc &lt;- data.frame(index = seq.Date(from = as.Date(Sys.Date()),\n                                          by = \"day\",\n                                          length.out = input$h))\n      \n      if(\"1\" %in% input$lm_args){\n        d_lm$trend &lt;- 1:nrow(d_lm)\n        d_fc$trend &lt;- (max(d_lm$trend) + 1):(max(d_lm$trend) + input$h)\n      }\n      \n      if(\"2\" %in% input$lm_args){\n        d_lm$season &lt;- as.factor(months((d_lm$index)))\n        d_fc$season &lt;- factor(months((d_fc$index)), levels = levels(d_lm$season))\n      }\n      \n      md &lt;- lm(input ~ ., data = d_lm[, - which(names(d_lm) == \"index\")])\n      \n      fc &lt;- predict(md, n.ahead = input$h, interval = \"prediction\",\n                    level = pi, newdata = d_fc) |&gt;\n        as.data.frame() \n      \n      \n      fc$index &lt;- seq.Date(from = as.Date(Sys.Date()),\n                           by = \"day\",\n                           length.out = input$h)\n      \n    }\n    \n    # Setting the plot\n    at_x &lt;- pretty(seq.Date(from = min(d$df$index),\n                            to = max(fc$index),\n                            by = \"day\"))\n    \n    at_y &lt;- c(pretty(c(d$df$input, fc$upr)), 60)\n    \n    plot(x = d$df$index, y = d$df$input,\n         col = \"#1f77b4\",\n         type = \"l\",\n         frame.plot = FALSE,\n         axes = FALSE,\n         panel.first = abline(h = at_y, col = \"grey80\"),\n         main = \"GOOG Forecast\",\n         xlim = c(min(d$df$index), max(fc$index)),\n         ylim = c(min(c(min(d$df$input), min(fc$lwr))), max(c(max(fc$upr), max(d$df$input)))),\n         xlab = paste(\"Model:\", input$model, sep = \" \"),\n         ylab = \"GOOG Price\")\n    mtext(side =1, text = format(at_x, format = \"%Y-%M\"), at = at_x,\n          col = \"grey20\", line = 1, cex = 0.8)\n    \n    mtext(side =2, text = format(at_y, scientific = FALSE), at = at_y,\n          col = \"grey20\", line = 1, cex = 0.8)\n    lines(x = fc$index, y = fc$fit, col = '#1f77b4', lty = 2, lwd = 2)\n    lines(x = fc$index, y = fc$upr, col = 'blue', lty = 2, lwd = 2)\n    lines(x = fc$index, y = fc$lwr, col = 'blue', lty = 2, lwd = 2)\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\nThe first step is to start a new shiny project. For this one, I will use renv as the documents suggest this to be useful. The New project dialog can be used to accomplish nearly all of this.\n\n\n\nScreenshot\n\n\nOk. Now there is a shiny app in a directory to use. Now let’s try the shinylive package.\ninstall.packages(\"shinylive\")\nIn theory, there is not that much to it so long as the app works with webR. So let’s compile it up and see what happens. There is an app.R file in myapp and that becomes the docs directory when transformed by shiny live. This all exists in a repository called SLT2 that can be found here. At first, I wanted to put it as a subdirectory here but could not quite get it all to render properly. With the separate repo, building the app in docs means that github pages can render it.\nshinylive::export(appdir = \"myapp\", outputdir = \"docs\")\n\n\n\nScreenshot\n\n\nIf it works, the docs directory of that repository has a forecasting app. I serve it using github pages."
  },
  {
    "objectID": "posts/Trump-Dissent/index.html",
    "href": "posts/Trump-Dissent/index.html",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "",
    "text": "Last updated: 2024-03-04 21:25:11.046155\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/Trump-Dissent/index.html#the-trump-case",
    "href": "posts/Trump-Dissent/index.html#the-trump-case",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "The Trump Case",
    "text": "The Trump Case\nColorado’s Secretary of State deemed Donald J. Trump ineligible for the ballot in Colorado as a result of the insurrection on January 6. The ultimate decision was described as unanimous though there may be something else going on. Rumors are circulating that there was some dissent though it did not make it into the final version. To have a look, I grabbed the opinion as issued. You can find it here."
  },
  {
    "objectID": "posts/Trump-Dissent/index.html#some-packages-and-setup",
    "href": "posts/Trump-Dissent/index.html#some-packages-and-setup",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "Some packages and setup",
    "text": "Some packages and setup\nFirst, I will need three packages. stringr for string detection, pdftools for importing the pdf and the tidyverse by habit.\n\n\nHow’s that done?\nlibrary(tidyverse)\nlibrary(pdftools)\nlibrary(stringr)"
  },
  {
    "objectID": "posts/Trump-Dissent/index.html#import-the-file-and-look-for-dissent",
    "href": "posts/Trump-Dissent/index.html#import-the-file-and-look-for-dissent",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "Import the file and look for dissent",
    "text": "Import the file and look for dissent\nLet’s import the file and then just see if the stem “dissent” exists.\n\n\nHow’s that done?\nOpinion &lt;- pdf_data(\"./data/23-719_19m2.pdf\")\ntable(str_detect(unlist(Opinion), \"dissent\"))\n\n\n\nFALSE  TRUE \n38097     3 \n\n\nThree times. Now let’s find them.\n\n\nHow’s that done?\nstr_locate_all(Opinion, \"dissent\")\n\n\n[[1]]\n     start end\n\n[[2]]\n     start end\n\n[[3]]\n     start   end\n[1,] 10548 10554\n\n[[4]]\n     start end\n\n[[5]]\n     start end\n\n[[6]]\n     start end\n\n[[7]]\n     start end\n\n[[8]]\n     start end\n\n[[9]]\n     start end\n\n[[10]]\n     start end\n\n[[11]]\n     start end\n\n[[12]]\n     start end\n\n[[13]]\n     start end\n\n[[14]]\n     start end\n\n[[15]]\n     start  end\n[1,]  7254 7260\n\n[[16]]\n     start end\n\n[[17]]\n     start end\n\n[[18]]\n     start end\n\n[[19]]\n     start end\n\n[[20]]\n     start  end\n[1,]  7367 7373\n\n\nSo they appear in the third, fifteenth, and twentieth sections. Three is still the decision and twenty is the last item."
  },
  {
    "objectID": "posts/Trump-Dissent/index.html#section-15",
    "href": "posts/Trump-Dissent/index.html#section-15",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "Section 15",
    "text": "Section 15\nSo let’s start with the 15th section and render the complete text that it contains.\n\nHow’s that done?\ncat(Opinion[[15]][[\"text\"]], sep=\" \")\n\nCite as: 601 U. S. ____ (2024) 1 , J., concurring in part dissenting part S OTOMAYOR S OTOMAYOR , K AGAN , and J ACKSON , JJ., and concurring in in judgment SUPREME COURT OF THE UNITED STATES _________________ No. 23–719 _________________ DONALD J. TRUMP, PETITIONER v. NORMA ANDERSON, ET AL . ON WRIT OF CERTIORARI TO THE SUPREME COURT OF COLORADO [March 4, 2024] J USTICE S OTOMAYOR , J USTICE K AGAN , and J USTICE J ACKSON , concurring in the judgment. “If it is not necessary to decide more to dispose of a case, then it is necessary not to decide more.” Dobbs v. Jackson Women’s Health Organization, 597 U. S. 215, 348 (2022) (R OBERTS , C. J., concurring in judgment). That fundamen- tal principle of judicial restraint is practically as old as our Republic. This Court is authorized “to say what the law is” only because “[t]hose who apply [a] rule to particular cases . . . must of necessity expound and interpret that rule.” Marbury v. Madison, 1 Cranch 137, 177 (1803) (emphasis added). Today, the Court departs from that vital principle, decid- ing not just this case, but challenges that might arise in the future. In this case, the Court must decide whether Colo- rado may keep a Presidential candidate off the ballot on the ground that he is an oathbreaking insurrectionist and thus disqualified from holding federal office under Section 3 of the Fourteenth Amendment. Allowing Colorado to do so would, we agree, create a chaotic state-by-state patchwork, at odds with our Nation’s federalism principles. That is enough to resolve this case. Yet the majority goes further. Even though “[a]ll nine Members of the Court” agree that this independent and sufficient rationale resolves this case,\nSo apparently, someone was talked into a change. The other two sections reflect citations to dissents in the opinion."
  },
  {
    "objectID": "posts/Trump-Dissent/index.html#section-3",
    "href": "posts/Trump-Dissent/index.html#section-3",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "Section 3",
    "text": "Section 3\n\nHow’s that done?\ncat(Opinion[[3]][[\"text\"]], sep=\" \")\n\nCite as: 601 U. S. ____ (2024) 3 Per Curiam States” and the President is not an “officer of the United States” within the meaning of that provision. See App. to Pet. for Cert. 184a–284a. In December, the Colorado Supreme Court reversed in part and affirmed in part by a 4 to 3 vote. Reversing the District Court’s operative holding, the majority concluded that for purposes of Section 3, the Presidency is an office under the United States and the President is an officer of the United States. The court otherwise affirmed, holding (1) that the Colorado Election Code permitted the respond- ents’ challenge based on Section 3; (2) that Congress need not pass implementing legislation for disqualifications un- der Section 3 to attach; (3) that the political question doc- trine did not preclude judicial review of former President Trump’s eligibility; (4) that the District Court did not abuse its discretion in admitting into evidence portions of a con- gressional Report on the events of January 6; (5) that the District Court did not err in concluding that those events constituted an “insurrection” and that former President Trump “engaged in” that insurrection; and (6) that former President Trump’s speech to the crowd that breached the Capitol on January 6 was not protected by the First Amend- ment. See id., at 1a–114a. The Colorado Supreme Court accordingly ordered Secre- tary Griswold not to “list President Trump’s name on the 2024 presidential primary ballot” or “count any write-in votes cast for him.” Id., at 114a. Chief Justice Boatright and Justices Samour and Berkenkotter each filed dissent- ing opinions. Id., at 115a–124a, 125a–161a, 162a–183a. Under the terms of the opinion of the Colorado Supreme Court, its ruling was automatically stayed pending this Court’s review. See id., at 114a. We granted former Presi- dent Trump’s petition for certiorari, which raised a single question: “Did the Colorado Supreme Court err in ordering President Trump excluded from the 2024 presidential pri- mary ballot?” See 601 U. S. ___ (2024). Concluding that it"
  },
  {
    "objectID": "posts/Trump-Dissent/index.html#section-20",
    "href": "posts/Trump-Dissent/index.html#section-20",
    "title": "A Dissent in the Trump 14th Amendment Case?",
    "section": "Section 20",
    "text": "Section 20\n\nHow’s that done?\ncat(Opinion[[20]][[\"text\"]], sep=\" \")\n\n6 TRUMP v. ANDERSON OTOMAYOR , , K K AGAN AGAN , , and J ACKSON , JJ., , JJ., concurring in the S OTOMAYOR S J ACKSON concurring in judgment judgment Bush v. Gore, 531 U. S. 98, 158 (2000) (Breyer, J., dissent- ing). The Court today needed to resolve only a single ques- tion: whether an individual State may keep a Presidential candidate found to have engaged in insurrection off its bal- lot. The majority resolves much more than the case before us. Although federal enforcement of Section 3 is in no way at issue, the majority announces novel rules for how that enforcement must operate. It reaches out to decide Section 3 questions not before us, and to foreclose future efforts to disqualify a Presidential candidate under that provision. In a sensitive case crying out for judicial restraint, it abandons that course. Section 3 serves an important, though rarely needed, role in our democracy. The American people have the power to vote for and elect candidates for national office, and that is a great and glorious thing. The men who drafted and rati- fied the Fourteenth Amendment, however, had witnessed an “insurrection [and] rebellion” to defend slavery. §3. They wanted to ensure that those who had participated in that insurrection, and in possible future insurrections, could not return to prominent roles. Today, the majority goes beyond the necessities of this case to limit how Section 3 can bar an oathbreaking insurrectionist from becoming President. Although we agree that Colorado cannot enforce Section 3, we protest the majority’s effort to use this case to define the limits of federal enforcement of that provision. Because we would decide only the issue before us, we concur only in the judgment."
  }
]