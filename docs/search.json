[
  {
    "objectID": "posts/Docker-Shiny/index.html",
    "href": "posts/Docker-Shiny/index.html",
    "title": "Docker and Shiny",
    "section": "",
    "text": "Last updated: 2023-03-08 08:50:33\nTimezone: America/Los_Angeles\nWhen it comes to shiny applications, hosting is a perennial concern. The free alternative shinyapps.io works great but limits the number of user applications that can be deployed. One can operate a server and serve the shiny applications for one’s self. To be honest, this solution is probably superior but is also costly insofar as system administration consumes time. There is an in between that is worth exploring.\nWe could link to the apps and deploy them in the cloud. The most common methods for accomplishing this particular task involve Docker containers and using Docker to run the shiny applications. I want to explore this alternative in what follows."
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#iframe-and-pages",
    "href": "posts/Docker-Shiny/index.html#iframe-and-pages",
    "title": "Docker and Shiny",
    "section": "iframe and pages",
    "text": "iframe and pages\nI built a little proof of concept on equities. You can also see it here."
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#iframe-and-slides",
    "href": "posts/Docker-Shiny/index.html#iframe-and-slides",
    "title": "Docker and Shiny",
    "section": "iframe and slides",
    "text": "iframe and slides\nI built a little proof of concept for slides. You can see it here."
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#shiny-server.conf",
    "href": "posts/Docker-Shiny/index.html#shiny-server.conf",
    "title": "Docker and Shiny",
    "section": "shiny-server.conf",
    "text": "shiny-server.conf\nI created a shiny-server.conf file to configure the shiny server inside the container. The contents of the file are below.\n# Define the user we should use when spawning R Shiny processes\nrun_as shiny;\n# Define a top-level server which will listen on a port\nserver {\n  # Instruct this server to listen on port 3838.\n  listen 3838;\n# Define the location available at the base URL\n  location / {\n# Run this location in 'site_dir' mode, which hosts the entire directory\n    # tree at '/srv/shiny-server'\n    site_dir /srv/shiny-server;\n    \n    # Define where we should put the log files for this location\n    log_dir /var/log/shiny-server;\n    \n    # Should we list the contents of a (non-Shiny-App) directory when the user \n    # visits the corresponding URL?\n    directory_index on;\n  }\n}"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#shiny-server.sh",
    "href": "posts/Docker-Shiny/index.html#shiny-server.sh",
    "title": "Docker and Shiny",
    "section": "shiny-server.sh",
    "text": "shiny-server.sh\nThis file invokes the shiny server.\n#!/bin/sh\n# Make sure the directory for individual app logs exists\nmkdir -p /var/log/shiny-server\nchown shiny.shiny /var/log/shiny-server\nexec shiny-server >> /var/log/shiny-server.log 2>&1"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#dockerfile",
    "href": "posts/Docker-Shiny/index.html#dockerfile",
    "title": "Docker and Shiny",
    "section": "Dockerfile",
    "text": "Dockerfile\nThe dockerfile needs instructions for building R and being able to execute the necessary components. Here is the Dockerfile.\n# get shiny server plus tidyverse packages image\nFROM rocker/shiny-verse:latest\n# system libraries of general use\nRUN apt-get update && apt-get install -y \\\n    sudo \\\n    pandoc \\\n    pandoc-citeproc \\\n    libcurl4-gnutls-dev \\\n    libcairo2-dev \\\n    libxt-dev \\\n    libssl-dev \\\n    libssh2-1-dev\n# install R packages required \n# (change it depending on the packages you need)\nRUN R -e \"install.packages(c('shinydashboard','DT','hrbrthemes','lubridate'), repos='http://cran.rstudio.com/')\"\n# Copy configuration files into the Docker image\nCOPY shiny-server.conf  /etc/shiny-server/shiny-server.conf\nCOPY /app /srv/shiny-server/\nRUN rm /srv/shiny-server/index.html\n# Make the ShinyApp available at port 3838\nEXPOSE 3838\n# Copy further configuration files into the Docker image\nCOPY shiny-server.sh /usr/bin/shiny-server.sh\nRUN [\"chmod\", \"+x\", \"/usr/bin/shiny-server.sh\"]\nCMD [\"/usr/bin/shiny-server.sh\"]"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#app.r",
    "href": "posts/Docker-Shiny/index.html#app.r",
    "title": "Docker and Shiny",
    "section": "app.R",
    "text": "app.R\nThe last thing that I require is a functional app. In this case, my app is three panels applied to archigos and an .rda version of the data exists in the container. Here is the total file.\n#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(shinydashboard)\nlibrary(tidyverse) \nlibrary(magrittr)\nlibrary(utf8)\nlibrary(shiny)\nlibrary(DT)\nlibrary(lubridate)\nlibrary(hrbrthemes)\n# load the data\nload(\"data/archigos.rda\")\n# create the set of countries\nCountry.Select <- Archigos %$% table(idacr) %>% data.frame() %>% mutate(Country = idacr) %>% select(Country)\n# plot for durations\nPlot.Durations <- function(data, state) {\n  data %>% ggplot(., aes(x=tenureY)) + geom_histogram() + theme_ipsum_rc() + labs(x=\"Durations\", title=paste0(\"Durations: \",state))\n}\n# plot for chronology\nPlot.Chronology <- function(data, state) {\n  data %>% arrange(eindate) %>% \n    ggplot(., aes(x=fct_reorder(leader, eindate), color=leader)) + geom_errorbar(aes(ymin=eindate, ymax=eoutdate)) + coord_flip() + labs(x=\"\", title=paste0(\"Leader Chronology: \",state)) + theme_ipsum_rc() + scale_color_viridis_d(option = \"E\") + guides(color=FALSE)\n}\n\nheader <- dashboardHeader(title = \"Archigos\")\nsidebar <-  dashboardSidebar(\n  sidebarMenu(selectInput(inputId = \"Country\", label=\"Country:\", choices = Country.Select$Country, selected=\"AFG\"))\n)\nbody <- dashboardBody(\n  tabsetPanel(\n    tabItem(tabName = \"dashb1\",\n            title=\"Chronology\",\n            # Boxes need to be put in a row (or column)\n            fluidRow(box(plotOutput(\"plotDur\"), width=12))\n    ),\n    tabItem(tabName = \"dashb2\",\n            title=\"Durations\",\n            fluidRow(box(plotOutput(\"plotChr\"), width=12))\n    )),\n  fluidRow(DTOutput(\"plotDT\"))\n)\nui <- dashboardPage(skin = \"purple\", header, sidebar, body)\n\nserver <- function(input, output) {\n  dataset <- reactive({\n    Archigos %>% \n      filter(idacr==input$Country) %>% \n      arrange(desc(eoutdate))\n  })\n  output$plotDT <- renderDT({  dataset()}, options = list(scrollX = TRUE) \n  )\n  output$plotDur <- renderPlot({\n    Plot.Chronology(dataset(), input$country)\n  })\n  output$plotChr <- renderPlot({\n    Plot.Durations(dataset(), input$country)\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#building-the-docker-container",
    "href": "posts/Docker-Shiny/index.html#building-the-docker-container",
    "title": "Docker and Shiny",
    "section": "Building the docker container",
    "text": "Building the docker container\nAt the terminal, here I need to build the docker image.\nsudo docker build image -t pieratio/archigos"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#pushing-to-a-docker-hub",
    "href": "posts/Docker-Shiny/index.html#pushing-to-a-docker-hub",
    "title": "Docker and Shiny",
    "section": "Pushing to a docker hub",
    "text": "Pushing to a docker hub\nThe first one is to go to docker hub. I have an account that has a single container currently there called archigos."
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#google-cloud-services",
    "href": "posts/Docker-Shiny/index.html#google-cloud-services",
    "title": "Docker and Shiny",
    "section": "Google cloud services",
    "text": "Google cloud services\nNext we wander off to cloud.google.com and enable containers for use in Cloud Run. I then set up the project called archigos attached to port 3838 and set it to run. Now I have a running shiny app in the cloud on google to tie to this post!"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#the-app",
    "href": "posts/Docker-Shiny/index.html#the-app",
    "title": "Docker and Shiny",
    "section": "The app",
    "text": "The app"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nA link to obert’s academic website\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeoFacets of Credit Quality\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHuman Rights Protections–Tables\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPigeons and Palettes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDocker and Shiny\n\n\n\n\n\n\nRobert W. Walker\n\n\nMar 3, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParameterizing Markdown\n\n\n\n\n\n\nRobert W. Walker\n\n\nFeb 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive Visualizations\n\n\n\n\n\n\nRobert W. Walker\n\n\nFeb 20, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nRobert W. Walker, Ph. D.\n\n\n\n\n\nRobert W. Walker is an Associate Professor of Quantitative Methods in the Atkinson Graduate School of Management at Willamette University\nHe earned a Ph. D. in political science from the University of Rochester in 2005 and has previously held teaching positions at Dartmouth College, Rice University, Texas A&M University, and Washington University in Saint Louis. His current research develops and applies semi-Markov processes to time-series, cross-section data in international relations and international/comparative political economy. He teaches courses in quantitative methods/applied statistics and microeconomic strategy and previously taught four iterations in the U. S. National Science Foundation funded Empirical Implications of Theoretical Models sequence at Washington University in Saint Louis. His work with Curt Signorino and Muhammet Bas was awarded the Miller Prize for the best article in Political Analysis in 2009.\nHis web presence is rww.science and his github is https://github.com/robertwwalker\n\n\nRobert’s Erdos-Bacon Number is 8.\n\n\n\n\n\n\n\nErdos Table\n\n\n\n\n\n\n\nBacon Table"
  },
  {
    "objectID": "links.html#data",
    "href": "links.html#data",
    "title": "Links",
    "section": "Data",
    "text": "Data\n\nOur World in Data\nKaggle\n#tidyTuesday\nThough dated, an amazing resource from kdnuggets\nHarvard Dataverse\nWorld Bank Open Data\nWorld Health Organization Open Data\nGoogle public data explorer\nRegistry of Open Data on AWS\nfivethirtyeight\nThe US Census Bureau\ndata.gov\ndbpedia\ninside airbnb\nyelp open data\nUNICEF data"
  },
  {
    "objectID": "links.html#r-for-data-science",
    "href": "links.html#r-for-data-science",
    "title": "Links",
    "section": "R for Data Science",
    "text": "R for Data Science\nFrom the front page of the second edition website.\n\n\n\n\n\n\nTip\n\n\n\nThis book will teach you how to do data science with R: You’ll learn how to get your data into R, get it into the most useful structure, transform it and visualize.\n\n\n R for Data Science (1st Edition)\n R for Data Science (2nd Edition)\n #r4ds"
  },
  {
    "objectID": "links.html#twitter",
    "href": "links.html#twitter",
    "title": "Links",
    "section": "Twitter",
    "text": "Twitter\nThe #rstats hashtag is the best place to start on Twitter.\n #rstats"
  },
  {
    "objectID": "links.html#mastodon",
    "href": "links.html#mastodon",
    "title": "Links",
    "section": "Mastodon",
    "text": "Mastodon\nR users are also on Mastodon, an open-source social network that is becoming increasingly popular.1 The #rstats tag is most active on fosstodon.\n fosstodon\n mastodon.social\n #rstats"
  },
  {
    "objectID": "links.html#data-science-by-design",
    "href": "links.html#data-science-by-design",
    "title": "Links",
    "section": "Data Science by Design",
    "text": "Data Science by Design\n(h/t) Ella Kaye for informing me of this.\nIn her words,\n\n\n\n\n\n\nNote\n\n\n\nData Science by Design (DSxD) celebrates creativity in data science and developing a more open, ethical, and inclusive future for data work. They run small conferences and an active slack group. They publish anthologies, both in print and online, collections of work by data designers, scientists, and artists, with each issue on a different theme.\nLink: The site I borrowed the description from.\n\n\n website\n Twitter\n book"
  },
  {
    "objectID": "posts/A Data Visualization/index.html",
    "href": "posts/A Data Visualization/index.html",
    "title": "geoFacets of Credit Quality",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nA GeoFacet View of Credit Quality\nIn previous work with Skip Krueger, we conceptualized bond ratings as a multiple rater problem and extracted measure of state level creditworthiness. I had always had it on my list to do something like this and recently ran across a package called geofacet that makes it easy to do. The end result should parse out state level credit risk and showcase the time series of credit risk for each of the states.\nSo here goes.\n\n\nHow’s that done?\nlibrary(haven)\nlibrary(dplyr)\nlibrary(geofacet)\nPew.Data <- read_dta(url(\"https://github.com/robertwwalker/academic-mymod/raw/master/data/Pew/modeledforprediction.dta\"))\nlibrary(tidyverse)\nload(url(\"https://github.com/robertwwalker/academic-mymod/raw/master/data/Pew/Scaled-BR-Pew.RData\"))\nstate.ratings <- data.frame(state_name=Pew.Data$state, statefips=Pew.Data$statefips, year=Pew.Data$fyear, BR.Data)\nstate.ratings.long <- tidyr::gather(state.ratings, sampleno, value, -statefips, -year, -state_name)\nstate.SE <- state.ratings.long %>% group_by(state_name,year) %>% summarise(Credit.Quality=mean(value), t1=quantile(value, probs=0.025), t2=quantile(value, probs=0.975))\nfips <-  data.frame(\nstringsAsFactors = FALSE,\nstate_name = c(\"Alabama\",\"Alaska\",\"Arizona\",\n         \"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\n         \"Delaware\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\n         \"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\n         \"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\n         \"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\n         \"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\n         \"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\n         \"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\n         \"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\n         \"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\n         \"Wisconsin\",\"Wyoming\",\"American Samoa\",\"Guam\",\n         \"Northern Mariana Islands\",\"Puerto Rico\",\"Virgin Islands\"),\nstate = c(\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\n                \"CO\",\"CT\",\"DE\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\n                \"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\n                \"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\n                \"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\n                \"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\",\"AS\",\"GU\",\"MP\",\n                \"PR\",\"VI\"),\nfips = c(\"01\",\"02\",\"04\",\"05\",\"06\",\n         \"08\",\"09\",\"10\",\"12\",\"13\",\"15\",\"16\",\"17\",\"18\",\"19\",\n         \"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\n         \"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\n         \"39\",\"40\",\"41\",\"42\",\"44\",\"45\",\"46\",\"47\",\"48\",\n         \"49\",\"50\",\"51\",\"53\",\"54\",\"55\",\"56\",\"60\",\"66\",\"69\",\n         \"72\",\"78\"))  \nRes1 <- left_join(state.SE, fips, by=c(\"state_name\" = \"state_name\"))\nRes1 %>% ggplot(., aes(x=year, y=Credit.Quality, group=state)) +\n  geom_pointrange(aes(ymin=t1, ymax=t2, colour=state, fill=state), alpha=0.1) + \n  geom_line(aes(colour=state)) +\n  guides(color=\"none\", fill=\"none\") +\n  facet_geo(~ state) +\n  theme_minimal() + \n  theme(axis.text.x = element_text(size=4, angle=45), axis.text.y = element_text(size=6)) + labs(title=\"Credit Quality in the US States\")\n\n\n\n\n\n\n\nReferences\n\n\nHow’s that done?\nknitr::write_bib(names(sessionInfo()$otherPkgs), file=\"bibliography.bib\")\n\n\n\n\n\n\n\nReferences\n\nHafen, Ryan. 2020. Geofacet: Ggplot2 Faceting Utilities for Geographical Data. https://github.com/hafen/geofacet.\n\n\nMüller, Kirill, and Hadley Wickham. 2022. Tibble: Simple Data Frames. https://CRAN.R-project.org/package=tibble.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\n———. 2022a. Stringr: Simple, Consistent Wrappers for Common String Operations. https://CRAN.R-project.org/package=stringr.\n\n\n———. 2022b. Tidyverse: Easily Install and Load the Tidyverse. https://CRAN.R-project.org/package=tidyverse.\n\n\n———. 2023. Forcats: Tools for Working with Categorical Variables (Factors). https://CRAN.R-project.org/package=forcats.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2022. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2.\n\n\nWickham, Hadley, Romain François, Lionel Henry, Kirill Müller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr.\n\n\nWickham, Hadley, and Lionel Henry. 2023. Purrr: Functional Programming Tools. https://CRAN.R-project.org/package=purrr.\n\n\nWickham, Hadley, Jim Hester, and Jennifer Bryan. 2022. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr.\n\n\nWickham, Hadley, Evan Miller, and Danny Smith. 2022. Haven: Import and Export SPSS, Stata and SAS Files. https://CRAN.R-project.org/package=haven.\n\n\nWickham, Hadley, Davis Vaughan, and Maximilian Girlich. 2023. Tidyr: Tidy Messy Data. https://CRAN.R-project.org/package=tidyr."
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#load-the-data-and-libraries",
    "href": "posts/HumanRightsTable/index.html#load-the-data-and-libraries",
    "title": "Human Rights Protections–Tables",
    "section": "Load the Data and Libraries",
    "text": "Load the Data and Libraries\n\n\nHow’s that done?\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(DT)\nlibrary(gt)\nlibrary(gtExtras)\n# install with remotes::install_github(\"jimjam-slam/ggflags\")\nlibrary(countrycode)\nlibrary(ggflags) \nload(\"data/HumanRightsProtectionScores_v4.01.Rdata\")\nHR.Data <- x\nrm(x)\nHR.Data <- HR.Data %>% left_join(., codelist, by= c(\"COW\" = \"cown\"))\n\n\nLet me now put the data into a browseable table."
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#a-browsable-datatable",
    "href": "posts/HumanRightsTable/index.html#a-browsable-datatable",
    "title": "Human Rights Protections–Tables",
    "section": "A Browsable DataTable",
    "text": "A Browsable DataTable\nThis is a panel data structure with two dimensions: countries and years. As a result, though there are not all that many countries in the world, each country is potentially repeated up to 74 times [1946 to 2019]. The filter boxes at the bottom allow you to select ranges of the quantitative indicators.\n\n\nHow’s that done?\nHR.Data %<>% \n  mutate(country.name.en = as.factor(country.name.en))\nHR.Data %>% \n    arrange(country.name.en, YEAR) %>%\n  select(`Country` = country.name.en, `Year` = YEAR, `Human Rights (mean)` = theta_mean, `Human Rights (std. dev.)` = theta_sd, `Killing (mean)` = killing_estimate_mean, `Killing (median)` = killing_estimate_median) %>%\n  datatable(., filter = \"bottom\", extensions = 'Buttons', options = list(\n    dom = 'Bfrtip',\n    buttons = c('copy', 'csv', 'excel'), \n  initComplete = JS(\n    \"function(settings, json) {\",\n    \"$(this.api().table().header()).css({'background-color': '#131F4F', 'color': '#fff'});\",\n    \"}\")\n)) %>%\n  formatRound(., 3:6)"
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#a-starter-table",
    "href": "posts/HumanRightsTable/index.html#a-starter-table",
    "title": "Human Rights Protections–Tables",
    "section": "A Starter Table",
    "text": "A Starter Table\n\n\nHow’s that done?\nHR.Summary <- HR.Data %>% \n  group_by(country.name.en) %>% \n  mutate(Obs = n()) %>% \n  filter(Obs==74) %>% \n  summarise(Obs = mean(Obs), \n            Mean = mean(theta_mean, na.rm=TRUE), \n            SD = sd(theta_mean)\n            )\nHR.Summary %>% mutate(Country = country.name.en) %>%\n  select(-country.name.en) %>% \n  relocate(Country, .before=Obs) %>% \n  gt() %>%\n  cols_label(SD = \"Std. Dev.\")\n\n\n\n\n\n\n  \n  \n    \n      Country\n      Obs\n      Mean\n      Std. Dev.\n    \n  \n  \n    Afghanistan\n74\n-0.808239676\n1.5835807\n    Albania\n74\n-0.733855668\n1.1318765\n    Argentina\n74\n-0.109687027\n0.8659722\n    Australia\n74\n1.496089393\n0.4821145\n    Austria\n74\n1.363463386\n0.7163969\n    Belgium\n74\n1.950358681\n0.8702604\n    Bhutan\n74\n1.639800956\n0.8947993\n    Bolivia\n74\n0.031485088\n0.6004716\n    Brazil\n74\n-0.986771401\n0.4380970\n    Bulgaria\n74\n-0.141004868\n0.8164432\n    Canada\n74\n1.513579623\n1.0867982\n    Chile\n74\n-0.116312712\n1.0980581\n    China\n74\n-1.690418324\n0.5866867\n    Colombia\n74\n-1.549160011\n0.3371290\n    Costa Rica\n74\n1.407450473\n0.5889534\n    Cuba\n74\n-0.780236659\n0.6767858\n    Czechia\n74\n0.234391962\n1.7996961\n    Denmark\n74\n2.408907458\n0.7988521\n    Dominican Republic\n74\n-0.353273333\n0.4778804\n    Ecuador\n74\n-0.065637090\n0.4093959\n    Egypt\n74\n-0.953780511\n0.3387420\n    El Salvador\n74\n-0.456976650\n1.0261214\n    Ethiopia\n74\n-1.250759418\n0.9343362\n    Finland\n74\n2.234185764\n0.9850571\n    France\n74\n0.732780358\n0.7610454\n    Greece\n74\n0.343929239\n0.6769572\n    Guatemala\n74\n-1.243405610\n1.0571324\n    Haiti\n74\n-0.700733551\n0.7827763\n    Honduras\n74\n-0.004659247\n0.6012447\n    Hungary\n74\n0.316610321\n1.1781173\n    Iceland\n74\n4.448582351\n0.7721095\n    Iran\n74\n-1.490454238\n0.5933340\n    Iraq\n74\n-1.759200305\n0.6444676\n    Ireland\n74\n1.714516245\n0.8303707\n    Italy\n74\n0.747846387\n0.5781654\n    Japan\n74\n1.346933187\n0.8414272\n    Jordan\n74\n-0.167098074\n0.3324552\n    Lebanon\n74\n-0.501174232\n0.5096649\n    Liberia\n74\n0.016102174\n0.9964066\n    Luxembourg\n74\n4.610048247\n0.7513979\n    Mexico\n74\n-0.698399686\n0.4417479\n    Mongolia\n74\n1.979956542\n0.8973234\n    Nepal\n74\n-0.407058523\n0.7314475\n    Netherlands\n74\n2.179110741\n1.6230486\n    New Zealand\n74\n3.388201387\n0.5058292\n    Nicaragua\n74\n-0.334761828\n0.8095413\n    Norway\n74\n2.580217186\n1.2412017\n    Oman\n74\n1.083276811\n0.4880672\n    Panama\n74\n0.534798448\n0.9244702\n    Paraguay\n74\n-0.431996166\n0.8683609\n    Peru\n74\n-0.398071785\n0.8472583\n    Philippines\n74\n-1.442899788\n0.5619596\n    Poland\n74\n0.228957535\n1.2563224\n    Portugal\n74\n0.513038978\n1.4489625\n    Romania\n74\n-0.552472696\n0.9883813\n    Russia\n74\n-1.596063064\n0.3926173\n    Saudi Arabia\n74\n-0.087345053\n0.4736322\n    South Africa\n74\n-1.013630691\n0.5891013\n    Spain\n74\n0.389802441\n0.7055324\n    Sweden\n74\n1.675085472\n1.0897249\n    Switzerland\n74\n1.177549367\n0.8326230\n    Syria\n74\n-1.051481698\n0.6846712\n    Thailand\n74\n-0.511999725\n0.4080301\n    Turkey\n74\n-0.890056818\n0.4962535\n    United Kingdom\n74\n0.890858555\n0.8947926\n    United States\n74\n0.232456052\n1.2330506\n    Uruguay\n74\n0.649137406\n1.4119239\n    Venezuela\n74\n-0.585731862\n0.7032445"
  },
  {
    "objectID": "posts/HumanRightsTable/index.html#improving-the-table",
    "href": "posts/HumanRightsTable/index.html#improving-the-table",
    "title": "Human Rights Protections–Tables",
    "section": "Improving the Table",
    "text": "Improving the Table\nI want to add some things to this. I want a spanning header for the three bits of actual human rights data that I am using. I also want a list column of the data to feed to the sparkline function to generate the time series plot. I found a file of flags on my hard drive that I got from somewhere and I want to deploy them in the table. I will also round the digits\n\n\nHow’s that done?\nlibrary(countrycode)\nFlags <- read.csv(\"data/flags_iso.csv\")\nHR.Summary <- HR.Data %>% \n  group_by(country.name.en) %>% \n  mutate(Obs = n()) %>% \n  filter(Obs==74) %>%\n  arrange(YEAR) %>%\n  summarise(Obs = mean(Obs), \n            Mean = mean(theta_mean, na.rm=TRUE), \n            SD = sd(theta_mean), \n            hr_data = list(theta_mean),\n            .groups = \"drop\")\nCCs <- codelist %>% select(country.name.en, iso3c)\nHR.Summary <- HR.Summary %>% \n  left_join(., CCs) %>%\n  left_join(., Flags, \n            by=c(\"iso3c\" = \"Alpha.3.code\")) %>%\n  select(-iso3c, -Country, -Alpha.2.code) %>%\n  relocate(., URL, .after=country.name.en)\nMy.Table <- HR.Summary %>%\n  gt() %>%\n# format the numeric output to 3 digit rounding  \n  fmt_number(columns = c(Mean, SD),\n             decimals = 3) %>%\n# create nice labels for a few ugly variable names\n  cols_label(country.name.en = \"Country\",\n             SD = \"Std. Dev.\",\n             hr_data = \"Time Series Plot\",\n             URL = \"Flag\") %>%\n# Plot the sparklines from the list column\n  gt_plt_sparkline(hr_data, \n                   type=\"ref_median\", \n                   same_limit = TRUE\n                   ) %>%\n# Plot the flags from the included URL's in the data\n  gt_img_rows(URL, img_source = \"web\", height = 30) %>%\n# use the guardian's table theme\n  gt_theme_guardian() %>% \n# give hulk coloring to the Mean Human Rights Score\n  gt_hulk_col_numeric(Mean) %>%\n# create a header and subheader\n  tab_header(title=\"Human Rights Data Summary\", subtitle = \"Data from Fariss (2020)\") %>%\n# create the spanner heading\n  tab_spanner(label = \"Human Rights Measures\",\n    columns = c(\n      Mean, SD, hr_data)\n    )\n# save the original as an image\ngtsave(My.Table, \"Table.png\")\n# show the table themed in accordance with the page\nMy.Table\n\n\n\n\n\n\n  \n    \n      Human Rights Data Summary\n    \n    \n      Data from Fariss (2020)\n    \n  \n  \n    \n      Country\n      Flag\n      Obs\n      \n        Human Rights Measures\n      \n    \n    \n      Mean\n      Std. Dev.\n      Time Series Plot\n    \n  \n  \n    Afghanistan\n\n74\n−0.808\n1.584\n          -2\n    Albania\n\n74\n−0.734\n1.132\n          1\n    Argentina\n\n74\n−0.110\n0.866\n          1.26\n    Australia\n\n74\n1.496\n0.482\n          1.9\n    Austria\n\n74\n1.363\n0.716\n          2.2\n    Belgium\n\n74\n1.950\n0.870\n          3.2\n    Bhutan\n\n74\n1.640\n0.895\n          2.4\n    Bolivia\n\n74\n0.031\n0.600\n          0.47\n    Brazil\n\n74\n−0.987\n0.438\n          -1\n    Bulgaria\n\n74\n−0.141\n0.816\n          1.29\n    Canada\n\n74\n1.514\n1.087\n          3.2\n    Chile\n\n74\n−0.116\n1.098\n          0.53\n    China\n\n74\n−1.690\n0.587\n          -1\n    Colombia\n\n74\n−1.549\n0.337\n          0\n    Costa Rica\n\n74\n1.407\n0.589\n          2.2\n    Cuba\n\n74\n−0.780\n0.677\n          0\n    Czechia\n\n74\n0.234\n1.800\n          3\n    Denmark\n\n74\n2.409\n0.799\n          3.4\n    Dominican Republic\n\n74\n−0.353\n0.478\n          -0.22\n    Ecuador\n\n74\n−0.066\n0.409\n          0.90\n    Egypt\n\n74\n−0.954\n0.339\n          -1\n    El Salvador\n\n74\n−0.457\n1.026\n          0.27\n    Ethiopia\n\n74\n−1.251\n0.934\n          -2\n    Finland\n\n74\n2.234\n0.985\n          2.5\n    France\n\n74\n0.733\n0.761\n          1.7\n    Greece\n\n74\n0.344\n0.677\n          1.3\n    Guatemala\n\n74\n−1.243\n1.057\n          0\n    Haiti\n\n74\n−0.701\n0.783\n          1\n    Honduras\n\n74\n−0.005\n0.601\n          -0.37\n    Hungary\n\n74\n0.317\n1.178\n          1.45\n    Iceland\n\n74\n4.449\n0.772\n          5.2\n    Iran\n\n74\n−1.490\n0.593\n          -2\n    Iraq\n\n74\n−1.759\n0.644\n          -2\n    Ireland\n\n74\n1.715\n0.830\n          3.1\n    Italy\n\n74\n0.748\n0.578\n          1.9\n    Japan\n\n74\n1.347\n0.841\n          2.9\n    Jordan\n\n74\n−0.167\n0.332\n          0.55\n    Lebanon\n\n74\n−0.501\n0.510\n          0.04\n    Liberia\n\n74\n0.016\n0.996\n          0.8\n    Luxembourg\n\n74\n4.610\n0.751\n          5.3\n    Mexico\n\n74\n−0.698\n0.442\n          -1\n    Mongolia\n\n74\n1.980\n0.897\n          1.0\n    Nepal\n\n74\n−0.407\n0.731\n          0.50\n    Netherlands\n\n74\n2.179\n1.623\n          3.8\n    New Zealand\n\n74\n3.388\n0.506\n          3.7\n    Nicaragua\n\n74\n−0.335\n0.810\n          -0.85\n    Norway\n\n74\n2.580\n1.241\n          4.3\n    Oman\n\n74\n1.083\n0.488\n          1.1\n    Panama\n\n74\n0.535\n0.924\n          2.66\n    Paraguay\n\n74\n−0.432\n0.868\n          1.08\n    Peru\n\n74\n−0.398\n0.847\n          1.07\n    Philippines\n\n74\n−1.443\n0.562\n          -2\n    Poland\n\n74\n0.229\n1.256\n          1.83\n    Portugal\n\n74\n0.513\n1.449\n          2.1\n    Romania\n\n74\n−0.552\n0.988\n          1\n    Russia\n\n74\n−1.596\n0.393\n          -1\n    Saudi Arabia\n\n74\n−0.087\n0.474\n          -1.12\n    South Africa\n\n74\n−1.014\n0.589\n          -1\n    Spain\n\n74\n0.390\n0.706\n          1.27\n    Sweden\n\n74\n1.675\n1.090\n          3.2\n    Switzerland\n\n74\n1.178\n0.833\n          2.6\n    Syria\n\n74\n−1.051\n0.685\n          -2\n    Thailand\n\n74\n−0.512\n0.408\n          -0.77\n    Turkey\n\n74\n−0.890\n0.496\n          -2\n    United Kingdom\n\n74\n0.891\n0.895\n          2.7\n    United States\n\n74\n0.232\n1.233\n          -0.17\n    Uruguay\n\n74\n0.649\n1.412\n          3.18\n    Venezuela\n\n74\n−0.586\n0.703\n          -1.71\n  \n  \n  \n\n\n\n\n\n\n\nImage of Table"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html",
    "href": "posts/InteractiveVisualization/index.html",
    "title": "Interactive Visualizations",
    "section": "",
    "text": "Last updated: 2023-02-20 14:22:17\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#the-plotly-package",
    "href": "posts/InteractiveVisualization/index.html#the-plotly-package",
    "title": "Interactive Visualizations",
    "section": "The plotly package",
    "text": "The plotly package\nplotly as a package has far more it can do.\n\n\nHow’s that done?\nlibrary(plotly); library(magrittr)\nlibrary(tidyquant)\n# Use tidyquant to get the data\nINTC <- tq_get(\"INTC\")\n# Slice off the most recent 90 days\nINTC.tail.90 <- tail(INTC, 90)\nINTC.tail <- INTC.tail.90\n# Create a counter of days\nINTC.tail$ID <- seq.int(nrow(INTC.tail))\n# Round the prices to 2 digits\nINTC.tail %<>% mutate(close = round(close, digits=2))\n\n\nNow we want a function to create the dataset for each stage of the animation. There are a few ways to do this but most involve writing a function to create them. This example function comes from the plotly documents.\n\n\nHow’s that done?\n# This is in the example for plotly paths\n# First a supporting function: getLevels takes input x\ngetLevels <- function (x) {\n  # if x is a factor\n    if (is.factor(x)) \n  # grab the levels of x\n        levels(x)\n  # if x is not a factor, sort unique values of x\n    else sort(unique(x))\n}\n# Two inputs, the data and the variable to form the splits along the x-axis\naccumulate_by <- function(dat, var) {\n  # This handles linking variables to their environment\n  var <- lazyeval::f_eval(var, dat)\n  # get the levels of the given variable using the function above\n  lvls <- getLevels(var)\n  # use lapply, tidy would use map to iterate over the levels in `lvls` and column bind the data with frame denotes by lvls[[x]]\n  dats <- lapply(seq_along(lvls), function(x) {\n   cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])\n  })\n  # bind the rows together\n  dplyr::bind_rows(dats)\n}\n# Invoke the function on our ID variable\nINTC.tail <- INTC.tail %>% accumulate_by(~ID)\n# Create a figure of ID and close for each frame value using plotly's version of a line plot: type:scatter-mode:lines\n# The rest is standard plotly\nfig <- INTC.tail %>% plot_ly(\n  x = ~ID, \n  y = ~close, \n  frame = ~frame,\n  type = 'scatter', \n  mode = 'lines', \n  # This is short for fill to zero on the y-axis\n  fill = 'tozeroy',\n  fillcolor='rgba(73, 26, 201, 0.5)',\n  line = list(color = 'rgb(73, 26, 201)'),\n  text = ~paste(\"Date: \", date, \"<br>Close: $\", close), \n  hoverinfo = 'text'\n)\n# Add the layout; one title and two axes\n# I also mess with the margin to keep the figure from being cut off.\nfig <- fig %>% layout(\n  title =\"Intel Stock Closing Price: Last 90 Days\",\n  yaxis = list(\n    title = \"Close\", \n    range = c(0,50), \n    zeroline = F,\n    tickprefix = \"$\"\n  ),\n  xaxis = list(\n    title = \"Day\", \n    range = c(0,90), \n    zeroline = F, \n    showgrid = F\n  ),\n  margin = list(t=120) # adjust the plot margin to avoid cutting off letters\n) \n# Animate the figure with 100 frames\nfig <- fig %>% animation_opts(\n  frame = 100, # transition time 100 ms\n  transition = 0, # duration of smooth transition in ms\n  redraw = FALSE # redraw the plot at each transition?\n)\nfig <- fig %>% animation_slider(\n  currentvalue = list(\n    prefix = \"Day \"\n  )\n)\nfig\n\n\n\n\n\n\n\nAn easier plotly for these data because they are OHLC\nA link to a stand-alone document with all the data.\n\n\nHow’s that done?\n# basic example of ohlc charts\n# custom colors\ni <- list(line = list(color = '#000000')) # black\nd <- list(line = list(color = '#FF0000')) # red\n# Create the figure\nfig.2 <- INTC.tail.90 %>%\n  plot_ly(x = ~date, type=\"ohlc\",\n          open = ~open, close = ~close,\n          high = ~high, low = ~low,\n          increasing = i, decreasing = d)\nfig.2"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#corbyn-was-a-facebook-engagement-machine",
    "href": "posts/InteractiveVisualization/index.html#corbyn-was-a-facebook-engagement-machine",
    "title": "Interactive Visualizations",
    "section": "Corbyn was a Facebook Engagement Machine",
    "text": "Corbyn was a Facebook Engagement Machine\nThe data are a small table.\n\n\nHow’s that done?\nlibrary(ggrepel)\nlibrary(tidyverse) # call the tidyverse for %>% and ggplot\nlibrary(ggthemes) # Use the economist theme\nlibrary(ggiraph)\nlibrary(DT)\ncorbyn <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-16/corbyn.csv\")\ndatatable(corbyn)\n\n\n\n\n\n\n\n\nggiraph of barplot and lollipop chart\nI want to plot this in a barplot that is linked with a lollipop chart.\n\n\nHow’s that done?\np1.Int <- ggplot(corbyn, aes(x=reorder(political_group,avg_facebook_likes), data_id=political_group, y=avg_facebook_likes, label=avg_facebook_likes, tooltip = paste0(political_group,\"<br>\",avg_facebook_likes, sep=\"\"))) + \n  geom_bar_interactive(stat=\"identity\", fill=\"#DC241f\") + \n  geom_label(fill=\"#DC241f\", color=\"#FFFFFF\", size=3.5) +\n  labs(x=\"Associate of the Labour Party\", y=\"Average Facebook Likes\") +\n  hrbrthemes::theme_ipsum_rc() +\n  coord_flip()\np2.Int <- ggplot(corbyn, aes(x=reorder(political_group,avg_facebook_likes), y=avg_facebook_likes, label=avg_facebook_likes, data_id=political_group, tooltip = paste0(political_group,\"<br>\",avg_facebook_likes, sep=\"\"))) + \n  geom_segment_interactive(aes(yend=0, xend=political_group), size=2, color=\"#DC241f\") + \n  geom_point(size=10, color=\"#DC241f\", alpha=0.8) +\n  geom_text(color=\"#FFFFFF\", size=3.5, fontface=2) +\n  labs(x=\"Associate of the Labour Party\", y=\"Average Facebook Likes\") +\n  hrbrthemes::theme_ipsum_rc() +\n  coord_flip()\nlibrary(patchwork)\nGIp1 <- p1.Int / p2.Int\ngirafe(ggobj=GIp1)"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#women-in-science",
    "href": "posts/InteractiveVisualization/index.html#women-in-science",
    "title": "Interactive Visualizations",
    "section": "Women in Science",
    "text": "Women in Science\nI had a simple example for last week. Now I want to make it nicer. The data are essentially a table. Let me show it using pivot_wider.\n\n\nHow’s that done?\nwomen_research <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-04-16/women_research.csv\")\nwomen_research\n\n\n\n\n  \n\n\n\nHow’s that done?\n# There's a spelling error I want to fix, select the rows and columns to fix and reassign the value\nwomen_research[women_research$field==\"Women inventores\",\"field\"] <- \"Women Inventors\" \n# The label for CS/Maths is too long, also\nwomen_research[women_research$field==\"Computer science, maths\",\"field\"] <- \"CS/Math\" \n# Make it wider\nWIR.Wide <- women_research %>% pivot_wider(., id_cols=country, names_from=field, values_from=percent_women)\n# A datatable\ndatatable(WIR.Wide)\n\n\n\n\n\n\n\n\nAn Interactive plot of Women in Research\n\n\nHow’s that done?\nlibrary(ggiraph)\nwomen_research <- women_research %>% group_by(country) %>% mutate(Avg.Women.Percent = mean(percent_women)) %>% ungroup()\nwomen_research$PercentWomen <- as.character(round(women_research$percent_women, 3))\np1 <- ggplot(women_research) +\n aes(x = reorder(country,Avg.Women.Percent), fill = country, weight = percent_women, tooltip = PercentWomen, data_id = country) +\n geom_bar_interactive() +\n scale_fill_viridis_d(option = \"cividis\") +\n guides(fill=FALSE) +\n coord_flip() +\n theme_minimal() + \n  theme(axis.text.y = element_text(angle = 45, hjust = 1, size=6)) +\n  labs(y = \"Percent of Publications/Patents\", x = \"Country/Group\", fill=\"Country/Grouping\", title = \"Publication and Invention by Women Around the World\", subtitle = \"Percent of Publications or Patents by Women\", caption = \"source: Economist Visualization Errors\") +\n facet_wrap(~field)\nlibrary(patchwork)\nggp1.changed <- ggplot(women_research) +\n aes(x = field, y = country, fill = percent_women, , data_id = country, tooltip=percent_women) +\n geom_tile_interactive(size = 1L) +\n scale_fill_viridis_c(option=\"cividis\") +\n labs(x = \"Field or Occupation\", y = \"Country\", fill = \"% Women\") +\n theme_minimal(base_size = 10)\nggp1.changed <- ggp1.changed + theme(plot.background = element_rect(colour = \"whitesmoke\"))\ncomb1 <- p1 / ggp1.changed\ngirafe(code = print(comb1))"
  },
  {
    "objectID": "posts/InteractiveVisualization/index.html#a-brief-crosstalk",
    "href": "posts/InteractiveVisualization/index.html#a-brief-crosstalk",
    "title": "Interactive Visualizations",
    "section": "A Brief Crosstalk",
    "text": "A Brief Crosstalk\nGetting this to work wasn’t hard. Getting it to style properly in interaction with the bootstrap frame was a pain. I finally just went with a blank column in two places to make sure that names don’t get cut off.\n\n\nHow’s that done?\nlibrary(htmltools)\nlibrary(crosstalk)\nlibrary(DT)\nlibrary(d3scatter)\n# Load the data\nBonds <- read.csv(url(\"https://github.com/robertwwalker/DADMStuff/raw/master/BondFunds.csv\"), row.names=1)\n# Turn characters into factors\nBonds <- Bonds %>% mutate(Fees = as.factor(Fees), Risk = as.factor(Risk), Type = as.factor(Type))\n# Create shared data object\nshared_bonds <- SharedData$new(Bonds)\n# Generate the bootsrap columns as three rows, page is 12 wide\nbscols(widths=c(12,12,12),\n  # A d3 visualization\n  d3scatter(shared_bonds, ~Expense.Ratio, ~Return.2009, ~Risk),\n  # The filter checkboxes\n  list(filter_checkbox(\"Fees\", \"Fees\", shared_bonds, ~Fees, inline=TRUE),\n       filter_checkbox(\"Type\", \"Type\", shared_bonds, ~Type, inline=TRUE),\n       filter_checkbox(\"Fees\", \"Risk\", shared_bonds, ~Risk, inline=TRUE)),\n  # The datatable\n  datatable(shared_bonds))\n\n\n\n\n\n\n\n\n\n\n\nFees\n\n\n\nNo\n\n\n\nYes\n\n\n\n\n\nType\n\n\n\nIntermediate Government\n\n\n\nShort Term Corporate\n\n\n\n\n\nRisk\n\n\n\nAbove average\n\n\n\nAverage\n\n\n\nBelow average\n\n\n\n\n\n\n\n\n\n\n\n\n\nWithout the bootstrap formatting of the webpage, it works much better.\n\n\n\nimage\n\n\n\nThe Fix for the cutoff parts\nThe trick to getting this to display properly was a blank column with width=1.\n\n\nHow’s that done?\nshared_bonds2 <- SharedData$new(Bonds)\n# This was adjusted from above\nbscols(widths=c(12,1,11,1,11),\n  d3scatter(shared_bonds2, ~Expense.Ratio, ~Return.2009, ~Risk),\n  \"\",  # First blank column\n  list(filter_checkbox(\"Fees\", \"Fees\", shared_bonds2, ~Fees, inline=TRUE),\n       filter_checkbox(\"Type\", \"Type\", shared_bonds2, ~Type, inline=TRUE),\n       filter_checkbox(\"Fees\", \"Risk\", shared_bonds2, ~Risk, inline=TRUE)),\n  \"\", # Second blank column\n  datatable(shared_bonds2))\n\n\n\n\n\n\n\n\n\n\n\n\nFees\n\n\n\nNo\n\n\n\nYes\n\n\n\n\n\nType\n\n\n\nIntermediate Government\n\n\n\nShort Term Corporate\n\n\n\n\n\nRisk\n\n\n\nAbove average\n\n\n\nAverage\n\n\n\nBelow average"
  },
  {
    "objectID": "posts/Pigeons-Pallettes/index.html#imgpalr",
    "href": "posts/Pigeons-Pallettes/index.html#imgpalr",
    "title": "Pigeons and Palettes",
    "section": "imgpalr",
    "text": "imgpalr\n has a package called imgpalr that will extract colors from an image. If I need to, it is install.packages(\"imgpalr\").\nIn the following code chunk, I will load the package and then I want to point it to the pigeon image that I downloaded. In my case, it is in the same directory as the R Markdown file and is called Pigeon.png.\nInside the command image_pal(), I point it to an image, I specify how many colors [5], what type of color scheme, I want qualitative, and then some characteristics of the colors. The plot will show me the image alongside the palette though it is upside down.\n\n\nHow’s that done?\nlibrary(imgpalr)\nPigeon.colors <- image_pal(\"img/Pigeon.png\", # This will need to be adjusted to the actual file location on your computer.  Mine is in my downloads.\n          n = 5, # How many colors?\n          type = \"qual\", # Type of palette?\n          saturation = c(0.75, 1), \n          brightness = c(0.75, 1), \n          plot = TRUE, # Show the image and the palette?\n          bw = c(0.7, 0.95)\n          )\n\n\n\n\n\nHow’s that done?\nPigeon.colors\n\n\n[1] \"#DA9BE6\" \"#E0D092\" \"#ED72BC\" \"#A4B7EE\" \"#AF98E6\"\n\n\nNow I have a palette in the markdown environment called Pigeon.colors."
  },
  {
    "objectID": "posts/Pigeons-Pallettes/index.html#data-to-plot",
    "href": "posts/Pigeons-Pallettes/index.html#data-to-plot",
    "title": "Pigeons and Palettes",
    "section": "Data to plot",
    "text": "Data to plot\nNow I need some data; I want five categories to match my palette. The rest is junk.\n\n\nHow’s that done?\nJunk.data <- data.frame(Stuff=c(\"Hi\",\"Howdy\",\"Hello\",\"Hola\",\"Hallo\"), vals = runif(5, 0.4, 1))\nJunk.data\n\n\n  Stuff      vals\n1    Hi 0.5307422\n2 Howdy 0.8800492\n3 Hello 0.5918145\n4  Hola 0.5992039\n5 Hallo 0.6614542\n\n\nI want to graph it using a barplot equivalent because I have the height of the bars in vals. Let me use the fill aesthetic to fill the bars in by the five discrete things stored as Stuff. The trick to using it is to manually specify the colors and point it to the Pigeon.colors above.\n\n\nHow’s that done?\nlibrary(ggplot2)\nggplot(Junk.data) + aes(x=Stuff, y=vals, fill=Stuff) + geom_col() + scale_fill_manual(values = Pigeon.colors) + hrbrthemes::theme_ipsum_rc()"
  },
  {
    "objectID": "posts/parameterized-markdown/index.html",
    "href": "posts/parameterized-markdown/index.html",
    "title": "Parameterizing Markdown",
    "section": "",
    "text": "Last updated: 2023-02-26 21:46:26\nTimezone: America/Los_Angeles"
  },
  {
    "objectID": "posts/parameterized-markdown/index.html#iframe-and-pages",
    "href": "posts/parameterized-markdown/index.html#iframe-and-pages",
    "title": "Parameterizing Markdown",
    "section": "iframe and pages",
    "text": "iframe and pages\nI built a little proof of concept on equities. You can also see it here."
  },
  {
    "objectID": "posts/parameterized-markdown/index.html#iframe-and-slides",
    "href": "posts/parameterized-markdown/index.html#iframe-and-slides",
    "title": "Parameterizing Markdown",
    "section": "iframe and slides",
    "text": "iframe and slides\nI built a little proof of concept for slides. You can see it here."
  },
  {
    "objectID": "where.html",
    "href": "where.html",
    "title": "Where",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nContact obert\n\n\n\nAppointments\nEmail\n\nZoom\nGoogle Scholar\nOffice Hours: 1300 to 1500 Pacific time on Wednesdays"
  },
  {
    "objectID": "slides-CWD.html",
    "href": "slides-CWD.html",
    "title": "Slides: Communicating with Data",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\nSlides for Communicating with Data"
  },
  {
    "objectID": "slides-DADM.html",
    "href": "slides-DADM.html",
    "title": "Slides: Data Analysis, Modelling, and Decision-Making",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\nSlides for DADM 622/5103"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Links",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nCourses and their Links\n\nCommunicating with Data Slides\nWebsite for Commmunicating with Data\nData Analysis, Modelling, Decision-Making"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#another-example",
    "href": "posts/Docker-Shiny/index.html#another-example",
    "title": "Docker and Shiny",
    "section": "Another Example",
    "text": "Another Example"
  },
  {
    "objectID": "posts/Docker-Shiny/index.html#one-that-uses-.rmd-flexdashboard",
    "href": "posts/Docker-Shiny/index.html#one-that-uses-.rmd-flexdashboard",
    "title": "Docker and Shiny",
    "section": "One that Uses .Rmd FlexDashboard",
    "text": "One that Uses .Rmd FlexDashboard\nIn progress…"
  },
  {
    "objectID": "courses-DADM.html",
    "href": "courses-DADM.html",
    "title": "Courses: Data Analysis, Modeling, and Decision-Making",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\nDADM 622/5103 is the core/required statistics and data course in the Atkinson Graduate School of Management. While most of the materials are available via the learning management system, I am increasingly migrating to something I have more control over because learning management systems change.\n\nThere is a set of occasionally and frequently asked questions for this course.\n\n\n\n\nThe slides for Spring 2023"
  },
  {
    "objectID": "courses-DADM.html#communicating-with-data",
    "href": "courses-DADM.html#communicating-with-data",
    "title": "Courses: Communicating With Data",
    "section": "Communicating With Data",
    "text": "Communicating With Data\nCommunicating with Data is a cross-listed course in the graduate school of Management and the Data Science program. In the course, we explore communication tools, e.g. tables and interactive tables, figures and interactive figures, shiny apps, websites, parameterized markdown, and, quite generically, the provision of tools for end users of data science tooling for insights.\n\nThere is a course website.\n\n\n\n\nThe slides for Spring 2023"
  },
  {
    "objectID": "courses-CWD.html#communicating-with-data",
    "href": "courses-CWD.html#communicating-with-data",
    "title": "Courses: Communicating With Data",
    "section": "Communicating With Data",
    "text": "Communicating With Data\nCommunicating with Data is a cross-listed course in the graduate school of Management and the Data Science program. In the course, we explore communication tools, e.g. tables and interactive tables, figures and interactive figures, shiny apps, websites, parameterized markdown, and, quite generically, the provision of tools for end users of data science tooling for insights.\n\nThere is a course website.\n\n\n\n\nThe slides for Spring 2023"
  },
  {
    "objectID": "courses-Essex.html#panel-data-at-essex",
    "href": "courses-Essex.html#panel-data-at-essex",
    "title": "Courses: Panel Data at Essex",
    "section": "Panel Data at Essex",
    "text": "Panel Data at Essex\n\nThere is a course website."
  },
  {
    "objectID": "courses-CAF.html",
    "href": "courses-CAF.html",
    "title": "Courses: Choice and Forecasting",
    "section": "",
    "text": "obertwwalker.github.io \n\n\n\n\nThere is a website for the course."
  }
]